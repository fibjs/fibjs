/*! @brief 加密算法模块

 使用方法：
 ```JavaScript
 var crypto = require('crypto');
 ```
 */
module crypto
{
    /*! @brief 指定对称加密算法 AES，支持 128, 192, 256 位 key，分组密码工作模式支持 ECB, CBC, CFB128, CTR, GCM，CCM，XTS */
    const AES = 1;

    /*! @brief 指定对称加密算法 CAMELLIA，支持 128, 192, 256 位 key，分组密码工作模式支持 ECB, CBC, CFB128, CTR, GCM，CCM */
    const CAMELLIA = 2;

    /*! @brief 指定对称加密算法 DES，支持 64 位 key，分组密码工作模式支持 ECB, CBC */
    const DES = 3;

    /*! @brief 指定对称加密算法 DES-EDE，支持 128 位 key，分组密码工作模式支持 ECB, CBC */
    const DES_EDE = 4;

    /*! @brief 指定对称加密算法 DES-EDE3，支持 192 位 key，分组密码工作模式支持 ECB, CBC */
    const DES_EDE3 = 5;

    /*! @brief 指定对称加密算法 BLOWFISH，支持 192 位 key，分组密码工作模式支持 ECB, CBC, CFB64, CTR */
    const BLOWFISH = 6;

    /*! @brief 指定对称加密算法 ARC4，支持 40, 56, 64, 128 位 key */
    const ARC4 = 7;

    /*! @brief 指定对称加密算法 ARIA，支持 128, 192, 256 位 key，分组密码工作模式支持 ECB, CBC, CFB128, CTR, GCM，CCM */
    const ARIA = 8;

    /*! @brief 指定对称加密算法 CHACHA20，支持 256 位 key，分组密码工作模式支持 POLY1305 */
    const CHACHA20 = 9;

    /*! @brief 指定对称加密算法 SM4, 分组密码工作模式支持 ECB, CBC */
    const SM4 = 10;

    /*! @brief 指定分组密码工作模式支持 ECB */
    const ECB = 1;

    /*! @brief 指定分组密码工作模式支持 CBC */
    const CBC = 2;

    /*! @brief 指定分组密码工作模式支持 CFB64 */
    const CFB64 = 3;

    /*! @brief 指定分组密码工作模式支持 CFB128 */
    const CFB128 = 4;

    /*! @brief 指定分组密码工作模式支持 OFB */
    const OFB = 5;

    /*! @brief 指定分组密码工作模式支持 CTR */
    const CTR = 6;

    /*! @brief 指定分组密码工作模式支持 GCM */
    const GCM = 7;

    /*! @brief 指定流密码模式 */
    const STREAM = 8;

    /*! @brief 指定分组密码工作模式支持 CCM */
    const CCM = 9;

    /*! @brief 指定分组密码工作模式支持 XTS */
    const XTS = 10;

    /*! @brief 指定分组密码工作模式支持 POLY1305 */
    const POLY1305 = 11;

    /*! @brief 指定填充模式为 PKCS7 */
    const PKCS7 = 0;

    /*! @brief 指定填充模式为 ONE_AND_ZEROS */
    const ONE_AND_ZEROS = 1;

    /*! @brief 指定填充模式为 ZEROS_AND_LEN */
    const ZEROS_AND_LEN = 2;

    /*! @brief 指定填充模式为 ZEROS */
    const ZEROS = 3;

    /*! @brief 指定填充模式为 NOPADDING */
    const NOPADDING = 4;

    /*! @brief Cipher 构造函数，参见 Cipher */
    static Cipher;

    /*! @brief PKey 构造函数，参见 PKey */
    static PKey;

    /*! @brief X509Cert 构造函数，参见 X509Cert */
    static X509Cert;

    /*! @brief X509Crl 构造函数，参见 X509Crl */
    static X509Crl;

    /*! @brief X509Req 构造函数，参见 X509Req */
    static X509Req;

    /*! @brief 根据给定的算法名称创建一个信息摘要对象
     @param algo 指定信息摘要对象的算法
     @return 返回信息摘要对象
    */
    static Digest createHash(String algo);

    /*! @brief 根据给定的算法名称创建一个 hmac 信息摘要对象
     @param algo 指定信息摘要对象的算法
     @param key 二进制签名密钥
     @return 返回信息摘要对象
    */
    static Digest createHmac(String algo, Buffer key);

    /*! @brief 加载一个 PEM/DER 格式的密钥文件
     @param filename 密钥文件名
     @param password 解密密码
     @return 返回包含密钥的对象
    */
    static PKey loadPKey(String filename, String password = "");

    /*! @brief 加载一个 CRT/PEM/DER/TXT 格式的证书，可多次调用

    loadFile 加载 mozilla 的 certdata,txt， 可于 http://hg.mozilla.org/releases/mozilla-release/raw-file/default/security/nss/lib/ckfw/builtins/certdata.txt 下载使用
     @param filename 证书文件名
     @return 返回包含证书的对象
    */
    static X509Cert loadCert(String filename);

    /*! @brief 加载一个 PEM/DER 格式的撤销证书，可多次调用
     @param filename 撤销证书文件名
     @return 返回包含撤销证书的对象
    */
    static X509Crl loadCrl(String filename);

    /*! @brief 加载一个 PEM/DER 格式的证书请求，可多次调用
     @param filename 证书请求文件名
     @return 返回包含请求证书的对象
    */
    static X509Req loadReq(String filename);

    /*! @brief 生成指定尺寸的随机数，使用 havege 生成器
     @param size 指定生成的随机数尺寸
     @return 返回生成的随机数
     */
    static Buffer randomBytes(Integer size) async;

    /*! @brief 生成指定尺寸的低强度随机数，使用快速的算法
     @param size 指定生成的随机数尺寸
     @return 返回生成的随机数
     */
    static Buffer simpleRandomBytes(Integer size) async;

    /*! @brief 生成指定尺寸的伪随机数，使用 entropy 生成器
     @param size 指定生成的随机数尺寸
     @return 返回生成的随机数
     */
    static Buffer pseudoRandomBytes(Integer size) async;

    /*! @brief 生成给定数据的可视化字符图像
     @param data 指定要展示的数据
     @param title 指定字符图像的标题，多字节字符会导致宽度错误
     @param size 字符图像尺寸
     @return 返回生成的可视化字符串图像
     */
    static String randomArt(Buffer data, String title, Integer size = 8);

    /*! @brief 依据 pbkdf1 根据明文 password 生成要求的二进制钥匙
     @param password 指定使用的密码
     @param salt 指定 hmac 使用的 salt
     @param iterations 指定迭代次数
     @param size 指定钥匙尺寸
     @param algo 指定要使用的 hash 算法，详见 hash 模块
     @return 返回生成的二进制钥匙
     */
    static Buffer pbkdf1(Buffer password, Buffer salt, Integer iterations, Integer size, Integer algo) async;

    /*! @brief 依据 pbkdf1 根据明文 password 生成要求的二进制钥匙
     @param password 指定使用的密码
     @param salt 指定 hmac 使用的 salt
     @param iterations 指定迭代次数
     @param size 指定钥匙尺寸
     @param algoName 指定要使用的 hash 算法，详见 hash 模块
     @return 返回生成的二进制钥匙
     */
    static Buffer pbkdf1(Buffer password, Buffer salt, Integer iterations, Integer size, String algoName) async;

    /*! @brief 依据 rfc2898 根据明文 password 生成要求的二进制钥匙
     @param password 指定使用的密码
     @param salt 指定 hmac 使用的 salt
     @param iterations 指定迭代次数
     @param size 指定钥匙尺寸
     @param algo 指定要使用的 hash 算法，详见 hash 模块
     @return 返回生成的二进制钥匙
     */
    static Buffer pbkdf2(Buffer password, Buffer salt, Integer iterations, Integer size, Integer algo) async;

    /*! @brief 依据 rfc2898 根据明文 password 生成要求的二进制钥匙
     @param password 指定使用的密码
     @param salt 指定 hmac 使用的 salt
     @param iterations 指定迭代次数
     @param size 指定钥匙尺寸
     @param algoName 指定要使用的 hash 算法，详见 hash 模块
     @return 返回生成的二进制钥匙
     */
    static Buffer pbkdf2(Buffer password, Buffer salt, Integer iterations, Integer size, String algoName) async;
};
