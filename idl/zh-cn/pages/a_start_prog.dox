/*! @page start_prog 开始写代码
@section program_sec 开始写代码

@subsection prg_step1 第一步：Hello, World!

选择你喜爱的文本编辑器，在 bin 目录下编辑生成一个 hello.js，内容如下：
```JavaScript
console.log('Hello, World!');
```

然后即可执行：
```JavaScript
Release/fibjs hello
```

可以看到屏幕输出：
```JavaScript
Hello, World!
```

很简单是吧。

@subsection prg_step2 第二步：DANG, DANG, DANG...

接下来我们想写个大钟程序 dang.js，每隔一秒钟敲一声。当然你也可以间隔时间更长。
```JavaScript
var coroutine = require("coroutine");

while(true){
  console.log('DANG...');
  coroutine.sleep(1000);
}
```

执行后，你会看到屏幕如你想的那样，每隔一秒输出一个 'DANG...'
```JavaScript
DANG...
DANG...
DANG...
......
```

不幸的是，这个程序永远不会退出来，你只能通过 ctrl+c 终止它。

@subsection prg_step3 第三步：DANG 们

同一时刻只有一口大钟显然不是我们想要的，我们需要好多口大钟。
```JavaScript
var coroutine = require("coroutine");

function dang(n){
  while(true){
    console.log('DANG %d...', n);
    coroutine.sleep(1000);
  }
}

for(var i = 0; i < 5; i ++)
  coroutine.start(dang,i);

while(true)
  coroutine.sleep(1000);
```

我们于是拥有 5 口大钟，每隔一秒同时敲响：
```JavaScript
DANG 0...
DANG 1...
DANG 2...
DANG 3...
DANG 4...
...
DANG 0...
DANG 1...
DANG 2...
DANG 3...
DANG 4...
...
```

如果想更和谐一点，大钟们不要那么扎堆一起响，可以修改一下代码：
```JavaScript
var coroutine = require("coroutine");

function dang(n){
  while(true){
    console.log('DANG %d...', n);
    coroutine.sleep(1000);
  }
}

for(var i = 0; i < 5; i ++){
  coroutine.start(dang,i);
  coroutine.sleep(200);
}

while(true)
  coroutine.sleep(1000);
```

@subsection prg_step4 进阶：并行作业

利用协程，我们可以完成很多有趣的事情，也可以用更有趣的方式完成事情。在很多时候，我们需要在一次请求完成多个独立的数据库操作，而且大部分时候，这些操作之间并无制约关系。通过协程，我们可以很方便地将这些操作平行发送，以提高响应速度。
```JavaScript
var coroutine = require("coroutine");

function func(){
  coroutine.parallel(function(){
    ...
  }, function(){
    ...
  }, function(){
    ...
  }, function(){
    ...
  });
}
```

上述代码中的多个匿名函数，会被同时执行，并在全部完成后，继续下面的代码。

@subsection prg_step5 再进一步：异步作业

同样道理，每次用户请求，总会有一些操作是不需要立即完成的，只有用户可以感知的部分需要在请求内完成，为了尽快响应用户，我们可以把用户暂时感知不到的请求丢到请求返回以后进行：
```JavaScript
var coroutine = require("coroutine");

function func(){
  ...

  coroutine.start(function(){
    ...
  });

  ...
}
```

上述代码中匿名函数便会延迟执行，而用户得以迅速得到反馈。

@subsection prg_step10 小结

以优雅的协程编写并发 js 代码，总是比层层回调，更加让人心旷神怡的。准备好开启 fibjs 之旅吧。

*/
