
/*! @brief 子进程对象

 ```JavaScript
 var process = require("process");
 var sub = process.open("ls");
 ```
 */
interface SubProcess : object
{
    /*! @brief 杀掉当前对象指向的进程，并传递信号
      @param signal 传递的信号
     */
    kill(Integer signal);

    /*! @brief 等待当前对象指向的进程结束，并返回进程结束代码
      @return 进程的结束代码
     */
    Integer wait() async;

    /*! @brief 查询当前对象所指向的进程是否存在指定名称的窗口，仅限 windows
      @param name 窗口名称
      @return 窗口存在则返回窗口的 rect，否则返回 undefined
     */
    Value findWindow(String name);

    /*! @brief 读取当前对象指向的进程的 id
     */
    readonly Integer pid;
    
    /*! @brief 读取当前对象指向的父进程的 id
     */
    readonly Integer ppid;

    /*! @brief 读取当前对象指向的进程的标准输入对象
     */
    readonly BufferedStream stdin;

    /*! @brief 读取当前对象指向的进程的标准输出对象
     */
    readonly BufferedStream stdout;

    /*! @brief 读取当前对象指向的进程的标准错误对象
     */
    readonly BufferedStream stderr;
};