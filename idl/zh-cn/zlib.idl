
/*! @brief zlib 压缩解压模块

 使用方法：
 ```JavaScript
 var zlib = require('zlib');
 ```
 */
module zlib
{
    /*! @brief deflate 压缩级别，设定不压缩 */
    const NO_COMPRESSION = 0;

    /*! @brief deflate 压缩级别，设定最快压缩 */
    const BEST_SPEED = 1;

    /*! @brief deflate 压缩级别，设定最高压缩 */
    const BEST_COMPRESSION = 9;

    /*! @brief deflate 压缩级别，设定缺省设置 */
    const DEFAULT_COMPRESSION = -1;

    /*! @brief 创建一个 deflate 流对象 
     @param to 用于存储处理结果的流
     @return 返回封装过的流对象*/
    static Stream createDeflate(Stream to);

    /*! @brief 创建一个 deflateRaw 流对象 
     @param to 用于存储处理结果的流
     @return 返回封装过的流对象*/
    static Stream createDeflateRaw(Stream to);

    /*! @brief 创建一个 gunzip 流对象 
     @param to 用于存储处理结果的流
     @return 返回封装过的流对象*/
    static Stream createGunzip(Stream to);

    /*! @brief 创建一个 gzip 流对象 
     @param to 用于存储处理结果的流
     @return 返回封装过的流对象*/
    static Stream createGzip(Stream to);

    /*! @brief 创建一个 inflate 流对象 
     @param to 用于存储处理结果的流
     @return 返回封装过的流对象*/
    static Stream createInflate(Stream to);

    /*! @brief 创建一个 inflateRaw 流对象 
     @param to 用于存储处理结果的流
     @return 返回封装过的流对象*/
    static Stream createInflateRaw(Stream to);

    /*! @brief 使用 deflate 算法压缩数据(zlib格式)
     @param data 给定要压缩的数据
     @param level 指定压缩级别，缺省为 DEFAULT_COMPRESSION
     @return 返回压缩后的二进制数据
     */
    static Buffer deflate(Buffer data, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief 使用 deflate 算法压缩数据到流对象中(zlib格式)
     @param data 给定要压缩的数据
     @param stm 指定存储压缩数据的流
     @param level 指定压缩级别，缺省为 DEFAULT_COMPRESSION
     */
    static deflateTo(Buffer data, Stream stm, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief 使用 deflate 算法压缩源流中的数据到流对象中(zlib格式)
     @param src 给定要压缩的数据所在的流
     @param stm 指定存储压缩数据的流
     @param level 指定压缩级别，缺省为 DEFAULT_COMPRESSION
     */
    static deflateTo(Stream src, Stream stm, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief 解压缩 deflate 算法压缩的数据(zlib格式)
     @param data 给定压缩后的数据
     @return 返回解压缩后的二进制数据
     */
    static Buffer inflate(Buffer data) async;

    /*! @brief 解压缩 deflate 算法压缩的数据到流对象中(zlib格式)
     @param data 给定要解压缩的数据
     @param stm 指定存储解压缩数据的流
     */
    static inflateTo(Buffer data, Stream stm) async;

    /*! @brief 解压缩源流中 deflate 算法压缩的数据到流对象中(zlib格式)
     @param src 给定要解压缩的数据所在的流
     @param stm 指定存储解压缩数据的流
     */
    static inflateTo(Stream src, Stream stm) async;

    /*! @brief 使用 gzip 算法压缩数据
     @param data 给定要压缩的数据
     @return 返回压缩后的二进制数据
     */
    static Buffer gzip(Buffer data) async;

    /*! @brief 使用 gzip 算法压缩数据到流对象中
     @param data 给定要压缩的数据
     @param stm 指定存储压缩数据的流
     */
    static gzipTo(Buffer data, Stream stm) async;

    /*! @brief 使用 gzip 算法压缩源流中的数据到流对象中
     @param src 给定要压缩的数据所在的流
     @param stm 指定存储压缩数据的流
     */
    static gzipTo(Stream src, Stream stm) async;

    /*! @brief 解压缩 gzip 算法压缩的数据
     @param data 给定压缩后的数据
     @return 返回解压缩后的二进制数据
     */
    static Buffer gunzip(Buffer data) async;

    /*! @brief 解压缩 gzip 算法压缩的数据到流对象中
     @param data 给定要解压缩的数据
     @param stm 指定存储解压缩数据的流
     */
    static gunzipTo(Buffer data, Stream stm) async;

    /*! @brief 解压缩源流中 gzip 算法压缩的数据到流对象中
     @param src 给定要解压缩的数据所在的流
     @param stm 指定存储解压缩数据的流
     */
    static gunzipTo(Stream src, Stream stm) async;

    /*! @brief 使用 deflate 算法压缩数据(deflateRaw)
     @param data 给定要压缩的数据
     @param level 指定压缩级别，缺省为 DEFAULT_COMPRESSION
     @return 返回压缩后的二进制数据
     */
    static Buffer deflateRaw(Buffer data, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief 使用 deflate 算法压缩数据到流对象中(deflateRaw)
     @param data 给定要压缩的数据
     @param stm 指定存储压缩数据的流
     @param level 指定压缩级别，缺省为 DEFAULT_COMPRESSION
     */
    static deflateRawTo(Buffer data, Stream stm, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief 使用 deflate 算法压缩源流中的数据到流对象中(deflateRaw)
     @param src 给定要压缩的数据所在的流
     @param stm 指定存储压缩数据的流
     @param level 指定压缩级别，缺省为 DEFAULT_COMPRESSION
     */
    static deflateRawTo(Stream src, Stream stm, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief 解压缩 deflate 算法压缩的数据(inflateRaw)
     @param data 给定压缩后的数据
     @return 返回解压缩后的二进制数据
     */
    static Buffer inflateRaw(Buffer data) async;

    /*! @brief 解压缩 deflate 算法压缩的数据到流对象中(inflateRaw)
     @param data 给定要解压缩的数据
     @param stm 指定存储解压缩数据的流
     */
    static inflateRawTo(Buffer data, Stream stm) async;

    /*! @brief 解压缩源流中 deflate 算法压缩的数据到流对象中(inflateRaw)
     @param src 给定要解压缩的数据所在的流
     @param stm 指定存储解压缩数据的流
     */
    static inflateRawTo(Stream src, Stream stm) async;
};
