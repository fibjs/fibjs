
/*! @brief Variant 数组对象，一般用以返回一组 Variant 数据

 用以创建和管理数组对象，创建方法：
 ```JavaScript
 var collection = require("collection");
 var a = new collection.List();
 ```
 */
interface List : object
{
    /*! @brief List 对象构造函数*/
    List();

    /*! @brief List 对象构造函数
     @param data 初始化的一组元素
    */
    List(Array data);

    /*! @brief 数组可使用下标直接访问 Variant 数据*/
    Variant operator[];

    /*! @brief 冻结数组内容，禁止一些修改操作 */
    freeze();

    /*! @brief 获取数组的尺寸 */
    readonly Integer length;

    /*! @brief 修改数组尺寸
     @param sz 指定新尺寸
     */
    resize(Integer sz);

    /*! @brief 在数组结尾添加一个元素
      @param v 指定添加的元素
      @return 添加元素之后数组的长度
     */
    Integer push(Variant v);

    /*! @brief 返回在list中可以找到给定元素的第一个索引，如果不存在，则返回-1

      如果参数 fromIndex 中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，即-1表示从最后一个元素开始查找，
      -2表示从倒数第二个元素开始查找 ，以此类推。
      
      注意：如果参数中提供的索引值是一个负值，仍然从前向后查询数组。如果抵消后的索引值仍小于0，则整个数组都将会被查询。其默认值为0.
      @param searchElement 要查找的元素
      @param fromIndex 开始查找的位置。如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回-1。
      @return 首个被找到的元素在数组中的索引位置; 若没有找到则返回 -1
     */
    Integer indexOf(Variant searchElement, Integer fromIndex = 0);

    /*! @brief lastIndexOf() 方法返回指定元素在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 fromIndex 处开始。

      如果参数 searchElement 大于或等于数组的长度，则整个数组会被查找。
      如果为负值，将其视为从数组末尾向前的偏移。即使该值为负，数组仍然会被从后向前查找。
      如果该值为负时，其绝对值大于数组长度，则方法返回 -1，即数组不会被查找
      @param searchElement 要查找的元素
      @param fromIndex 从此位置开始逆向查找。默认为数组的长度减 1，即整个数组都被查找。
      @return 给定元素在数组中最后一次出现的索引位置; 若没有找到则返回 -1
     */
    Integer lastIndexOf(Variant searchElement, Integer fromIndex = 0);

    /*! @brief 在数组结尾添加一个元素
      @param ... 指定添加的多个元素
      @return 添加元素之后数组的长度
     */
    Integer push(...);

    /*! @brief 在数组结尾添加一组元素
      @param data 添加的一组元素
     */
    pushArray(Array data);

    /*! @brief 返回数组结尾的一个元素
      @return 结尾的元素
     */
    Variant pop();

    /*! @brief 返回一个新数组，包含指定范围的数据，若范围超出缓存，则只返回有效部分数据
     @param start 指定范围的起始，缺省从头开始
     @param end 指定范围的结束，缺省到缓存结尾
     @return 返回新的数组
     */
    List slice(Integer start = 0, Integer end = -1);

    /*! @brief 将当前数组与给定的一个或者多个数组合并
     @param ... 给定的一个或多个数组
     @return 返回合并的数组
     */
    List concat(...);

    /*! @brief 检测全部数据是否通过测试函数
     @param func 测试函数
     @param thisArg 调用测试函数的参数，可省略
     @return 全部通过测试则返回 true
     */
    Boolean every(Function func, Value thisArg = undefined);

    /*! @brief 检测一些数据是否通过测试函数
     @param func 测试函数
     @param thisArg 调用测试函数的参数，可省略
     @return 全部不通过测试则返回 false，否则返回true
     */
    Boolean some(Function func, Value thisArg = undefined);

    /*! @brief 过滤通过测试的数据成为一个新的数组
     @param func 测试函数
     @param thisArg 调用过滤函数的参数，可省略
     @return 经过过滤的新数组
     */
    List filter(Function func, Value thisArg = undefined);

    /*! @brief 遍历处理全部数据
     @param func 处理函数
     @param thisArg 调用处理函数的参数，可省略
     */
    forEach(Function func, Value thisArg = undefined);

    /*! @brief 遍历处理全部数据并返回结果
     @param func 处理函数
     @param thisArg 调用处理函数的参数，可省略
     @return 处理结果数组
     */
    List map(Function func, Value thisArg = undefined);

    /*! @brief 遍历处理全部数据并返回累积结果
     @param func 处理函数
     @param initVal 初始值，可省略
     @return 处理结果数组
     */
    Value reduce(Function func, Value initVal = undefined);

    /*! @brief 排序全部数据并返回列表本身
     @param func 比较处理函数
     @return 列表本身
     */
    List sort(Function func);

    /*! @brief 排序全部数据并返回列表本身
     @return 列表本身
     */
    List sort();

    /*! @brief 返回列表的 js 数组
      @return 包含数据的 js 数组
     */
    Array toArray();
};
