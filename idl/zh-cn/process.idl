/*! @brief 进程处理模块，用以管理当前进程的资源

 引用方法：
 ```JavaScript
 var process = require('process');
 ```
 */
module process : EventEmitter
{
    /*! @brief 返回当前进程的命令行参数 */
    static readonly Array argv;

    /*! @brief 返回当前进程的特殊命令行参数，这些参数被 fibjs 用于设置运行环境 */
    static readonly Array execArgv;

    /*! @brief 返回fibjs版本字符串 */
    static readonly String version;

    /*! @brief 查询当前运行执行文件完整路径 */
    static readonly String execPath;

    /*! @brief 查询当前进程的环境变量 */
    static readonly Object env;

    /*! @brief 查询当前 cpu 环境，可能的结果为 'amd64', 'arm', 'arm64', 'ia32' */
    static readonly String arch;

    /*! @brief 查询当前平台名称，可能的结果为 'darwin', 'freebsd', 'linux', 或 'win32' */
    static readonly String platform;

    /*! @brief 改变当前的 umask，Windows 不支持此方法
     @param mask 指定新的掩码
     @return 返回之前的 mask
    */
    static Integer umask(Integer mask);

    /*! @brief 改变当前的 umask，Windows 不支持此方法
     @param mask 指定新的掩码， 字符串类型八进制(e.g: "0664")
     @return 返回之前的 mask
    */
    static Integer umask(String mask);

    /*! @brief 返回当前的 umask，Windows 不支持此方法
     @return 返回当前的 mask 值
    */
    static Integer umask();

    /*! @brief 退出当前进程，并返回结果
     @param code 返回进程结果
     */
    static exit(Integer code);

    /*! @brief 返回操作系统当前工作路径
     @return 返回当前系统路径
     */
    static String cwd();

    /*! @brief 修改操作系统当前工作路径
     @param directory 指定设定的新路径
     */
    static chdir(String directory);

    /*! @brief 查询运行环境运行时间，以秒为单位
     @return 返回表示时间的数值
    */
    static Number uptime();

    /*! @brief 查询当前进程内存使用报告

     内存报告生成类似以下结果：
     ```JavaScript
     {
       "rss": 8622080,
       "heapTotal": 4083456,
       "heapUsed": 1621800
     }
     ```
     其中：
     - rss 返回进程当前占用物理内存大小
     - heapTotal 返回 v8 引擎堆内存大小
     - heapUsed 返回 v8 引擎正在使用堆内存大小
     @return 返回包含内存报告
     */
    static Object memoryUsage();

    /*! @brief 启动一个纤程
     @param func 制定纤程执行的函数
     @param ... 可变参数序列，此序列会在纤程内传递给函数
     */
    static nextTick(Function func, ...);

    /*! @brief 运行指定的命令行，接管进程输入输出流，并返回进程对象

     opts 支持的选项如下：
     ```JavaScript
     {
         "timeout": 100, // 单位为 ms
         "envs": [] // 进程环境变量
     }
     ```
     @param command 指定运行的命令行
     @param args 指定运行的参数列表
     @param opts 指定运行的选项
     @return 返回包含运行结果的进程对象
     */
    static SubProcess open(String command, Array args, Object opts = {});

    /*! @brief 运行指定的命令行，接管进程输入输出流，并返回进程对象

     opts 支持的选项如下：
     ```JavaScript
     {
         "timeout": 100, // 单位为 ms
         "envs": [] // 进程环境变量
     }
     ```
     @param command 指定运行的命令行
     @param opts 指定运行的选项
     @return 返回包含运行结果的进程对象
     */
    static SubProcess open(String command, Object opts = {});

    /*! @brief 运行指定的命令行，并返回进程对象

     opts 支持的选项如下：
     ```JavaScript
     {
         "timeout": 100, // 单位为 ms
         "envs": [] // 进程环境变量
     }
     ```
     @param command 指定运行的命令行
     @param args 指定运行的参数列表
     @param opts 指定运行的选项
     @return 返回包含运行结果的进程对象
     */
    static SubProcess start(String command, Array args, Object opts = {});

    /*! @brief 运行指定的命令行，并返回进程对象

     opts 支持的选项如下：
     ```JavaScript
     {
         "timeout": 100, // 单位为 ms
         "envs": [] // 进程环境变量
     }
     ```
     @param command 指定运行的命令行
     @param opts 指定运行的选项
     @return 返回包含运行结果的进程对象
     */
    static SubProcess start(String command, Object opts = {});

    /*! @brief 运行指定的命令行，并返回进程的结束代码

     opts 支持的选项如下：
     ```JavaScript
     {
         "timeout": 100, // 单位为 ms
         "envs": [] // 进程环境变量
     }
     ```
     @param command 指定运行的命令行
     @param args 指定运行的参数列表
     @param opts 指定运行的选项
     @return 返回命令的运行结果
     */
    static Integer run(String command, Array args, Object opts = {});

    /*! @brief 运行指定的命令行，并返回进程的结束代码

     opts 支持的选项如下：
     ```JavaScript
     {
         "timeout": 100, // 单位为 ms
         "envs": [] // 进程环境变量
     }
     ```
     @param command 指定运行的命令行
     @param opts 指定运行的选项
     @return 返回命令的运行结果
     */
    static Integer run(String command, Object opts = {});
};
