/*! @brief 并发控制模块

 引用方法：
 ```JavaScript
 var coroutine = require('coroutine');
 ```
 */
module coroutine
{
    /*! @brief 锁对象，参见 Lock */
    static Lock;

    /*! @brief 信号量对象，参见 Semaphore */
    static Semaphore;

    /*! @brief 条件变量对象，参见 Condition */
    static Condition;

    /*! @brief 事件对象，参见 Event */
    static Event;

    /*! @brief 独立线程工作对象，参见 Worker */
    static Worker;

    /*! @brief 启动一个纤程并返回纤程对象
     @param func 制定纤程执行的函数
     @param args 可变参数序列，此序列会在纤程内传递给函数
     @return 返回纤程对象
     */
    static Fiber start(Function func, ...args);

    /*! @brief 并行执行一组函数，并等待返回
     @param funcs 并行执行的函数数组
     @param fibers 限制并发 fiber 数量，缺省为 -1，启用与 funcs 数量相同 fiber
     @return 返回函数执行结果的数组
     */
    static Array parallel(Array funcs, Integer fibers = -1);

    /*! @brief 并行执行一个函数处理一组数据，并等待返回
     @param datas 并行执行的数据数组
     @param func 并行执行的函数
     @param fibers 限制并发 fiber 数量，缺省为 -1，启用与 datas 数量相同 fiber
     @return 返回函数执行结果的数组
     */
    static Array parallel(Array datas, Function func, Integer fibers = -1);

    /*! @brief 并行执行一个函数多次，并等待返回
     @param func 并行执行的函数数
     @param num 重复任务数量
     @param fibers 限制并发 fiber 数量，缺省为 -1，启用与 funcs 数量相同 fiber
     @return 返回函数执行结果的数组
     */
    static Array parallel(Function func, Integer num, Integer fibers = -1);

    /*! @brief 并行执行一组函数，并等待返回
     @param funcs 一组并行执行的函数
     @return 返回函数执行结果的数组
     */
    static Array parallel(...funcs);

    /*! @brief 返回当前纤程
     @return 当前纤程对象
     */
    static Fiber current();

    /*! @brief 暂停当前纤程指定的时间
     @param ms 指定要暂停的时间，以毫秒为单位，缺省为 0，即有空闲立即回恢复运行
     */
    static sleep(Integer ms = 0) async;

    /*! @brief 返回当前正在运行的全部 fiber 数组 */
    static readonly Array fibers;

    /*! @brief 查询和设置空闲 Fiber 数量，服务器抖动较大时可适度增加空闲 Fiber 数量。缺省为 256 */
    static Integer spareFibers;

    /*! @brief 查询当前 vm 编号 */
    static readonly Integer vmid;

    /*! @brief 修改和查询本 vm 的输出级别，用以过滤输出信息，缺省为 console.NOTSET，全部输出
     */
    static Integer loglevel;
};
