
/*! @brief XmlElement 对象表示 XML 文档中的元素
*/
interface XmlElement : XmlNode
{
    /*! @brief 查询元素的命名空间的 URI。如果选定的节点无命名空间，则该属性返回 NULL
    */
    readonly String namespaceURI;

    /*! @brief 查询和设置元素的命名空间前缀。如果选定的节点无命名空间，则该属性返回 NULL
    */
    String prefix;

    /*! @brief 查询元素的本地名称。如果选定的节点无命名空间，则该属性等同于 nodeName
    */
    readonly String localName;

    /*! @brief 返回元素的标签名
    */
    readonly String tagName;

    /*! 查询和设置元素的 id 属性
    */
    String id;

    /*! 查询和设置选定元素的文本。查询时，返回元素节点内所有文本节点的值；设置时，删除所有子节点，并用单个文本节点来替换它们。
    */
    String textContent;

    /*! 查询和设置选定元素的 HTML 文本，仅在 html 模式有效。查询时，返回元素节点内所有子节点的 HTML 编码；设置时，删除所有子节点，并用指定的 HTML 解码后替换它们。
    */
    String innerHTML;

    /*! 查询和设置元素的 class 属性，仅在 html 模式有效
    */
    String className;

    /*! @brief 返回包含被选节点属性的 NamedNodeMap。如果被选节点不是元素，则该属性返回 NULL。
    */
    readonly XmlNamedNodeMap attributes;

    /*! @brief 通过名称查询属性的值
     @param name 指定查询的属性名
     @return 返回属性的值
    */
    String getAttribute(String name);

    /*! @brief 通过命名空间 URI 和名称来获取属性值
     @param namespaceURI 指定查询的命名空间 URI
     @param localName 指定查询的属性名
     @return 返回属性的值
    */
    String getAttributeNS(String namespaceURI, String localName);

    /*! @brief 创建或改变某个新属性

     该方法把指定的属性设置为指定的值。如果不存在具有指定名称的属性，该方法将创建一个新属性
     @param name 指定要设置的属性名
     @param value 指定要设置的属性值
    */
    setAttribute(String name, String value);

    /*! @brief 创建或改变具有命名空间的属性

     该方法与 setAttribute 方法类似，只是要创建或设置的属性由命名空间 URI 和限定名（由名字空间前缀、冒号和名字空间中的本地名构成）共同指定。除了可以改变一个属性的值以外，使用该方法还可以改变属性的名字空间前缀
     @param namespaceURI 指定要设置的命名空间 URI
     @param qualifiedName 指定要设置的属性名
     @param value 指定要设置的属性值
    */
    setAttributeNS(String namespaceURI, String qualifiedName, String value);

    /*! @brief 通过名称删除指定的属性
     @param name 指定删除的属性名
    */
    removeAttribute(String name);

    /*! @brief 通过命名空间和名称删除指定的属性
     @param namespaceURI 指定要删除的命名空间 URI
     @param localName 指定删除的属性名
    */
    removeAttributeNS(String namespaceURI, String localName);

    /*! @brief 查询当前节点是否拥有指定名称的属性
     @param name 指定查询的属性名称
     @return 如果当前元素节点拥有指定属性，则返回 true，否则返回 false
    */
    Boolean hasAttribute(String name);

    /*! @brief 查询当前节点是否拥有指定命名空间和名称的属性
     @param namespaceURI 指定要查询的命名空间 URI
     @param localName 指定查询的属性名称
     @return 如果当前元素节点拥有指定属性，则返回 true，否则返回 false
    */
    Boolean hasAttributeNS(String namespaceURI, String localName);

    /*! @brief 返回拥有指定名称的所有元素的 XmlNodeList

     该方法将遍历指定元素的子孙节点，返回一个 XmlElement 节点的 XmlNodeList 对象，表示所有具有指定标签名的文档元素。元素在返回的数组中的顺序就是它们出现在文档源代码中的顺序。

     XmlDocument 接口也定义了 getElementsByTagName 方法，它与该方法相似，但遍历整个文档，而不是遍历某个元素的子孙节点。
     @param tagName 需检索的标签名。值 "*" 匹配所有的标签
     @return 节点树中具有指定标记的 XmlElement 节点的 XmlNodeList 集合。返回的元素节点的顺序就是它们在源文档中出现的顺序。
    */
    XmlNodeList getElementsByTagName(String tagName);

    /*! @brief 返回拥有指定命名空间和名称的所有元素的 XmlNodeList

     该方法与 getElementsByTagName 方法相似，只是想获取的元素的标记名被指定为命名空间 URI 和在命名空间中定义的本地名的组合。
     @param namespaceURI 指定要查询的命名空间 URI
     @param localName 需检索的标签名。值 "*" 匹配所有的标签
     @return 节点树中具有指定标记的 XmlElement 节点的 XmlNodeList 集合。返回的元素节点的顺序就是它们在源文档中出现的顺序。
    */
    XmlNodeList getElementsByTagNameNS(String namespaceURI, String localName);
};
