
/*! @brief 基础消息对象

 Message 对象兼容于 mq 各个模块，可用于构建自定义消息处理系统，创建方法：
 ```JavaScript
 var mq = require("mq");
 var m = new mq.Message();
 ```
*/
interface Message : object
{
    /*! @brief 指定消息类型 1，代表一个文本类型 */
    const TEXT = 1;

    /*! @brief 指定消息类型 2，代表一个二进制类型 */
    const BINARY = 2;

    /*! @brief 消息对象构造函数 */
    Message();

    /*! @brief 消息的基本内容 */
    String value;

    /*! @brief 消息的基本参数 */
    List params;

    /*! @brief 消息类型 */
    Integer type;

    /*! @brief 查询消息的数据 */
    readonly Value data;

    /*! @brief 包含消息数据部分的流对象 */
    SeekableStream body;

    /*! @brief 从流内读取指定大小的数据，此方法为 body 相应方法的别名
     @param bytes 指定要读取的数据量，缺省为读取随机大小的数据块，读出的数据尺寸取决于设备
     @return 返回从流内读取的数据，若无数据可读，或者连接中断，则返回 null
     */
    Buffer read(Integer bytes = -1) async;

    /*! @brief 从流内读取剩余的全部数据，此方法为 body 相应方法的别名
     @return 返回从流内读取的数据，若无数据可读，或者连接中断，则返回 null
     */
    Buffer readAll() async;

    /*! @brief 写入给定的数据，此方法为 body 相应方法的别名
     @param data 给定要写入的数据
     */
    write(Buffer data) async;

    /*! @brief 以 JSON 编码写入给定的数据
     @param data 给定要写入的数据
     */
    json(Value data) async;

    /*! @brief 消息数据部分的长度 */
    readonly Long length;

    /*! @brief 设置当前消息处理结束，Chain 处理器不再继续后面的事务 */
    end();

    /*! @brief 查询当前消息是否结束
     @return 结束则返回 true
    */
    Boolean isEnded();

    /*! @brief 清除消息的内容 */
    clear();

    /*! @brief 发送格式化消息到给定的流对象
     @param stm 指定接收格式化消息的流对象
     */
    sendTo(Stream stm) async;

    /*! @brief 从给定的缓存流对象中读取格式化消息，并解析填充对象
     @param stm 指定读取格式化消息的流对象
     */
    readFrom(Stream stm) async;

    /*! @brief 查询消息 readFrom 时的流对象 */
    readonly Stream stream;

    /*! @brief 获取响应消息对象*/
    readonly Message response;

    /*! @brief 查询和设置消息处理的最后错误 */
    String lastError;
};
