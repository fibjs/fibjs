/*! @brief 64位整数对象

 创建方法：
 ```JavaScript
 var n = new Int64(123);
 ```
 */
interface Int64 : object
{
    /*! @brief Int64 构造函数
     @param num 初始化的值
    */
    Int64(Long num = 0);

    /*! @brief Int64 构造函数
     @param hi 高32位数
     @param lo 低32位数
    */
    Int64(Long hi, Long lo);

    /*! @brief Int64 构造函数
     @param num 初始化的值
    */
    Int64(Int64 num);

    /*! @brief Int64 构造函数
     @param num 数字字符串
     @param base 数字字符串的编码方式，可以接受 2-16, 32, 64，默认为 10，为 10 时自动识别 0x 编码
    */
    Int64(String num, Integer base = 10);

    /*! @brief 高 32 位数值 */
    Long hi;

    /*! @brief 低 32 位数值 */
    Long lo;

    /*! @brief 将 Int64 内的数值与给定数值比较大小
     @param num 指定比较的数值
     @return 返回 1 表示 Int64 内的数值比指定数值更大，0 表示相等，-1 表示更小
    */
    Integer compare(Int64 num);

    /*! @brief 将 Int64 内的数值左移相应的位数，此操作不影响 Int64 原有数值
     @param bits 指定移动的位数
     @return 返回包含移位以后数值的对象
    */
    Int64 shiftLeft(Integer bits);

    /*! @brief 将 Int64 内的数值右移相应的位数，此操作不影响 Int64 原有数值
     @param bits 指定移动的位数
     @return 返回包含移位以后数值的对象
    */
    Int64 shiftRight(Integer bits);

    /*! @brief 将 Int64 内的数值与给定的数值进行按位 and 操作，此操作不影响 Int64 原有数值
     @param num 指定运算的数值
     @return 返回包含预算以后数值的对象
    */
    Int64 and (Int64 num);

    /*! @brief 将 Int64 内的数值与给定的数值进行按位 or 操作，此操作不影响 Int64 原有数值
     @param num 指定运算的数值
     @return 返回包含预算以后数值的对象
    */
    Int64 or (Int64 num);

    /*! @brief 将 Int64 内的数值与给定的数值进行按位 xor 操作，此操作不影响 Int64 原有数值
     @param num 指定运算的数值
     @return 返回包含预算以后数值的对象
    */
    Int64 xor (Int64 num);

    /*! @brief 将 Int64 内的数值与给定的数值进行加操作，此操作不影响 Int64 原有数值
     @param num 指定运算的数值
     @return 返回包含预算以后数值的对象
    */
    Int64 add(Int64 num);

    /*! @brief 将 Int64 内的数值与给定的数值进行减操作，此操作不影响 Int64 原有数值
     @param num 指定运算的数值
     @return 返回包含预算以后数值的对象
    */
    Int64 sub(Int64 num);

    /*! @brief 将 Int64 内的数值与给定的数值进行乘操作，此操作不影响 Int64 原有数值
     @param num 指定运算的数值
     @return 返回包含预算以后数值的对象
    */
    Int64 multi(Int64 num);

    /*! @brief 将 Int64 内的数值与给定的数值进行除操作，此操作不影响 Int64 原有数值
     @param num 指定运算的数值
     @return 返回包含预算以后数值的对象
    */
    Int64 div(Int64 num);

    /*! @brief 转换成数字类型
      @return 返回转换后的数字
     */
    Number toNumber();

    /*! @brief 转换成字符串类型
      @param base 字符串进制数，可以接受 2-16, 32, 64，默认为 10
      @return 返回转换后的字符串
     */
    String toString(Integer base = 10);
};