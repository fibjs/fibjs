
/*! @brief 二进制数据缓存对象，用于 io 读写的数据处理

 Buffer 对象为全局基础类，在任何时候都可以直接以 new Buffer(...) 创建：
 ```JavaScript
 var buf = new Buffer();
 ```
 */
interface Buffer : object
{
    /*! @brief 缓存对象构造函数
     @param datas 初始化数据数组
     */
    Buffer(Array datas);

    /*! @brief 缓存对象构造函数
     @param datas 初始化数据数组
     */
    Buffer(ArrayBuffer datas);

    /*! @brief 缓存对象构造函数
     @param datas 初始化数据数组
     */
    Buffer(TypedArray datas);

    /*! @brief 缓存对象构造函数
     @param datas 初始化数据数组
     */
    Buffer(ArrayBufferView datas);

    /*! @brief 缓存对象构造函数
     @param buffer 初始化Buffer对象
     */
    Buffer(Buffer buffer);

    /*! @brief 缓存对象构造函数
     @param str 初始化字符串，字符串将以 utf-8 格式写入，缺省则创建一个空对象
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     */
    Buffer(String str, String codec = "utf8");

    /*! @brief 缓存对象构造函数
     @param size 初始化缓冲区大小
     */
    Buffer(Integer size = 0);

    /*! @brief 检测给定的变量是否是 Buffer 对象
     @param v 给定需要检测的变量
     @return 传入对象是否 Buffer 对象
    */
    static Boolean isBuffer(Value v);

    /*! @brief 通过其他 Buffer 创建 Buffer 对象
     @param buffer 给定 Buffer 类型变量用于创建 Buffer 对象
     @param byteOffset 指定数据起始位置，起始为 0
     @param length 指定数据长度，起始位 -1，表示剩余所有数据
     @return 返回 Buffer 实例
     */
    static Buffer from(Buffer buffer, Integer byteOffset = 0, Integer length = -1);

    /*! @brief 通过字符串创建 Buffer 对象
     @param str 初始化字符串，字符串将以 utf-8 格式写入
     @param byteOffset 指定数据起始位置，起始为 0
     @param length 指定数据长度，起始位 -1，表示剩余所有数据
     @return 返回 Buffer 实例
     */
    static Buffer from(String str, Integer byteOffset = 0, Integer length = -1);

    /*! @brief 通过字符串创建 Buffer 对象
     @param str 初始化字符串，字符串将以 utf-8 格式写入，缺省则创建一个空对象
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 返回 Buffer 实例
     */
    static Buffer from(String str, String codec = "utf8");

    /*! @brief 拼接多个缓存区中的数据
     @param buflist 待拼接的Buffer数组
     @param cutLength 截取多少个Buffer对象
     @return 拼接后产生的新 Buffer 对象
    */
    static Buffer concat(Array buflist, Integer cutLength = -1);

    /*! @brief 分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。
     @param size 缓冲区的所需长度
     @param fill 预先填充新缓冲区的值，可使用 string/buffer/integer 值类型。 默认值：0
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 填充好的新 Buffer 对象
    */
    static Buffer alloc(Integer size, Integer fill = 0, String codec = "utf8");

    /*! @brief 分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。
     @param size 缓冲区的所需长度
     @param fill 预先填充新缓冲区的值，可使用 string/buffer/integer 值类型。 默认值：0
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 填充好的新 Buffer 对象
    */
    static Buffer alloc(Integer size, String fill = "", String codec = "utf8");

    /*! @brief 分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。
     @param size 缓冲区的所需长度
     @param fill 预先填充新缓冲区的值，可使用 string/buffer/integer 值类型。 默认值：0
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 填充好的新 Buffer 对象
    */
    static Buffer alloc(Integer size, Buffer fill, String codec = "utf8");

    /*! @brief 分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。
     @param size 缓冲区的所需长度
     @return 指定尺寸的新 Buffer 对象
    */
    static Buffer allocUnsafe(Integer size);

    /*! @brief 分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。
     @param size 缓冲区的所需长度
     @return 指定尺寸的新 Buffer 对象
    */
    static Buffer allocUnsafeSlow(Integer size);

    /*! @brief 返回字符串的实际字节长度
     @param str 待取字节的字符串，如果str为 ArrayBuffer/TypedArray/DataView/Buffer 对象，则返回它们的实际长度
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 返回实际字节长度
     */
    static Integer byteLength(String str, String codec = "utf8");

    /*! @brief 返回字符串的实际字节长度
     @param str 待取字节的字符串，如果str为 ArrayBuffer/TypedArray/DataView/Buffer 对象，则返回它们的实际长度
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 返回实际字节长度
     */
    static Integer byteLength(ArrayBuffer str, String codec = "utf8");

    /*! @brief 返回字符串的实际字节长度
     @param str 待取字节的字符串，如果 str 为 ArrayBuffer/TypedArray/DataView/Buffer 对象，则返回它们的实际长度
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 返回实际字节长度
     */
    static Integer byteLength(ArrayBufferView str, String codec = "utf8");

    /*! @brief 返回字符串的实际字节长度
     @param str 待取字节的字符串，如果str为 ArrayBuffer/TypedArray/DataView/Buffer 对象，则返回它们的实际长度
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 返回实际字节长度
     */
    static Integer byteLength(Buffer str, String codec = "utf8");

    /*! @brief 比较 buf1 和 buf2, 往往用于 Buffer 实例之间的排序. 该方式等价于 buf1.compare(buf2).
    @param buf1 待比较的 buf
    @param buf2 待比较的 buf
    @return 返回比较字节长度
     */
    static Integer compare(Buffer buf1, Buffer buf2);

    /*! @brief 检测编码格式是否被支持
     @param codec 待检测的编码格式
     @return 是否支持
     */
    static Boolean isEncoding(String codec);

    /*! @brief 缓存对象可使用下标直接访问二进制数据*/
    Integer operator[];

    /*! @brief 获取缓存对象的尺寸 */
    readonly Integer length;

    /*! @brief 修改缓存对象尺寸
     @param sz 指定新尺寸
     */
    resize(Integer sz);

    /*! @brief 在缓存对象尾部写入一组二进制数据
     @param data 初始化二进制数据
     */
    append(Buffer data);

    /*! @brief 在缓存对象尾部写入字符串，字符串将以 utf-8 格式写入
     @param str 要写入的字符串
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     */
    append(String str, String codec = "utf8");

    /*! @brief 向缓存对象写入指定字符串，字符串默认为utf-8，越界时只写入部分数据
     @param str 待写入的字符串
     @param offset 写入起始位置
     @param length 写入长度（单位字节，默认值-1），未指定时为待写入字符串的长度
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 写入的数据字节长度
     */
    Integer write(String str, Integer offset = 0, Integer length = -1, String codec = "utf8");

    /*! @brief 向缓存对象写入指定字符串，字符串默认为utf-8，越界时只写入部分数据
     @param str 待写入的字符串
     @param offset 写入起始位置
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 写入的数据字节长度
     */
    Integer write(String str, Integer offset = 0, String codec = "utf8");

    /*! @brief 向缓存对象写入指定字符串，字符串默认为utf-8，越界时只写入部分数据
     @param str 待写入的字符串
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 写入的数据字节长度
     */
    Integer write(String str, String codec = "utf8");

    /*! @brief 为 Buffer 对象填充指定内容数据
     @param v 需要填充的数据，如果未指定 offset 和 end，将填充满整个 buffer
     @param offset 填充起始位置
     @param end 填充终止位置
     @return 返回当前 Buffer 对象
     */
    Buffer fill(Integer v, Integer offset = 0, Integer end = -1);

    /*! @brief 为 Buffer 对象填充指定内容数据
     @param v 需要填充的数据，如果未指定 offset 和 end，将填充满整个 buffer
     @param offset 填充起始位置
     @param end 填充终止位置
     @return 返回当前 Buffer 对象
     */
    Buffer fill(Buffer v, Integer offset = 0, Integer end = -1);

    /*! @brief 为 Buffer 对象填充指定内容数据
     @param v 需要填充的数据，如果未指定 offset 和 end，将填充满整个 buffer
     @param offset 填充起始位置
     @param end 填充终止位置
     @return 返回当前 Buffer 对象
     */
    Buffer fill(String v, Integer offset = 0, Integer end = -1);

    /*! @brief 返回某个指定数据在 Buffer 中首次出现的位置
     @param v 待查找数据，如果未指定 offset，默认从起始位开始
     @param offset 起始查找位置
     @return 返回查找到的位置，未找到返回 -1
     */
    Integer indexOf(Integer v, Integer offset = 0);

    /*! @brief 返回某个指定数据在 Buffer 中首次出现的位置
     @param v 待查找数据，如果未指定 offset，默认从起始位开始
     @param offset 起始查找位置
     @return 返回查找到的位置，未找到返回 -1
     */
    Integer indexOf(Buffer v, Integer offset = 0);

    /*! @brief 返回某个指定数据在 Buffer 中首次出现的位置
     @param v 待查找数据，如果未指定 offset，默认从起始位开始
     @param offset 起始查找位置
     @return 返回查找到的位置，未找到返回 -1
     */
    Integer indexOf(String v, Integer offset = 0);

    /*! @brief 比较缓存区的内容
     @param buf 待比较缓存对象
     @return 内容比较结果
     */
    Integer compare(Buffer buf);

    /*! @brief 从源缓存对象区域拷贝数据到目标缓存对象区域
     @param targetBuffer 目标缓存对象
     @param targetStart 目标缓存对象开始拷贝字节位置，缺省为 0
     @param sourceStart 源缓存对象开始字节位置, 缺省为 0
     @param sourceEnd 源缓存对象结束字节位置, 缺省为 -1,表示源数据长度
     @return 拷贝的数据字节长度
     */
    Integer copy(Buffer targetBuffer, Integer targetStart = 0, Integer sourceStart = 0, Integer sourceEnd = -1);

    /*! @brief 从缓存对象读取一个 8 位无符号整型数值
     @param offset 指定读取的起始位置，缺省为 0
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Integer readUInt8(Integer offset = 0, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 16 位无符号整型数值，以低字节序的存储方式
     @param offset 指定读取的起始位置，缺省为 0
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Integer readUInt16LE(Integer offset = 0, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 16 位无符号整型数值，以高字节序的存储方式
     @param offset 指定读取的起始位置，缺省为 0
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Integer readUInt16BE(Integer offset = 0, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 32 位无符号整型数值，以低字节序的存储方式
     @param offset 指定读取的起始位置，缺省为 0
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Long readUInt32LE(Integer offset = 0, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 32 位无符号整型数值，以高字节序的存储方式
     @param offset 指定读取的起始位置，缺省为 0
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Long readUInt32BE(Integer offset = 0, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个无符号整型数值，最大支持 64 位，以低字节序的存储方式
     @param offset 指定读取的起始位置，缺省为 0
     @param byteLength 指定读取的字节数，缺省 8 个字节
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Long readUIntLE(Integer offset = 0, Integer byteLength = 8, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个无符号整型数值，最大支持 64 位，以高字节序的存储方式
     @param offset 指定读取的起始位置，缺省为 0
     @param byteLength 指定读取的字节数，缺省 8 个字节
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Long readUIntBE(Integer offset = 0, Integer byteLength = 8, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 64 位整型数值，以低字节序的存储方式
     @param offset 指定读取的起始位置，缺省为 0
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Long readInt64LE(Integer offset = 0, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 64 位整型数值，以高字节序的存储方式
     @param offset 指定读取的起始位置，缺省为 0
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Long readInt64BE(Integer offset = 0, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 8 位整型数值
     @param offset 指定读取的起始位置，缺省为 0
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Integer readInt8(Integer offset = 0, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 16 位整型数值，以低字节序的存储方式
     @param offset 指定读取的起始位置，缺省为 0
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Integer readInt16LE(Integer offset = 0, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 16 位整型数值，以高字节序的存储方式
     @param offset 指定读取的起始位置，缺省为 0
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Integer readInt16BE(Integer offset = 0, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 32 位整型数值，以低字节序的存储方式
     @param offset 指定读取的起始位置，缺省为 0
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Integer readInt32LE(Integer offset = 0, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 32 位整型数值，以高字节序的存储方式
     @param offset 指定读取的起始位置，缺省为 0
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Integer readInt32BE(Integer offset = 0, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个整型数值，最大支持 64 位，以低字节序的存储方式
     @param offset 指定读取的起始位置，缺省为 0
     @param byteLength 指定读取的字节数，缺省 8 个字节
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Long readIntLE(Integer offset = 0, Integer byteLength = 8, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个整型数值，最大支持 64 位，以高字节序的存储方式
     @param offset 指定读取的起始位置，缺省为 0
     @param byteLength 指定读取的字节数，缺省 8 个字节
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Long readIntBE(Integer offset = 0, Integer byteLength = 8, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 64 位整型数值，以低字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeInt64LE(Long value, Integer offset = 0, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 64 位整型数值，以高字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeInt64BE(Long value, Integer offset = 0, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个浮点数，以低字节序的存储方式
     @param offset 指定读取的起始位置，缺省为 0
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的浮点数
     */
    Number readFloatLE(Integer offset = 0, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个浮点数，以高字节序的存储方式
     @param offset 指定读取的起始位置，缺省为 0
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的浮点数
     */
    Number readFloatBE(Integer offset = 0, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个双精度浮点数，以低字节序的存储方式
     @param offset 指定读取的起始位置，缺省为 0
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的双精度浮点数
     */
    Number readDoubleLE(Integer offset = 0, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个双精度浮点数，以高字节序的存储方式
     @param offset 指定读取的起始位置，缺省为 0
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的双精度浮点数
     */
    Number readDoubleBE(Integer offset = 0, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 8 位无符号整型数值
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeUInt8(Integer value, Integer offset = 0, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 16 位无符号整型数值，以低字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeUInt16LE(Integer value, Integer offset = 0, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 16 位无符号整型数值，以高字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeUInt16BE(Integer value, Integer offset = 0, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 32 位无符号整型数值，以低字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeUInt32LE(Long value, Integer offset = 0, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 32 位无符号整型数值，以高字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeUInt32BE(Long value, Integer offset = 0, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个无符号整型数值，最大支持 64 位，以低字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param byteLength 指定写入的字节数，缺省 8 个字节
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeUIntLE(Long value, Integer offset = 0, Integer byteLength = 8, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个无符号整型数值，最大支持 64 位，以高字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param byteLength 指定写入的字节数，缺省 8 个字节
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeUIntBE(Long value, Integer offset = 0, Integer byteLength = 8, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 8 位整型数值
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeInt8(Integer value, Integer offset = 0, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 16 位整型数值，以低字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeInt16LE(Integer value, Integer offset = 0, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 16 位整型数值，以高字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeInt16BE(Integer value, Integer offset = 0, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 32 位整型数值，以低字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeInt32LE(Integer value, Integer offset = 0, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 32 位整型数值，以高字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeInt32BE(Integer value, Integer offset = 0, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个整型数值，最大支持 64 位，以低字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param byteLength 指定写入的字节数，缺省 8 个字节
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeIntLE(Long value, Integer offset = 0, Integer byteLength = 8, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个整型数值，最大支持 64 位，以高字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param byteLength 指定写入的字节数，缺省 8 个字节
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeIntBE(Long value, Integer offset = 0, Integer byteLength = 8, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个浮点数，以低字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeFloatLE(Number value, Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个浮点数，以高字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeFloatBE(Number value, Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个双精度浮点数，以低字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeDoubleLE(Number value, Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个双精度浮点数，以高字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     @return offset 加上写入的字节数
     */
    Integer writeDoubleBE(Number value, Integer offset, Boolean noAssert = false);

    /*! @brief 返回一个新缓存对象，包含指定起始到缓存结尾的数据
     @param start 指定范围的起始，缺省从头开始
     @return 返回新的缓存对象
     */
    Buffer slice(Integer start = 0);

    /*! @brief 返回一个新缓存对象，包含指定范围的数据，若范围超出缓存，则只返回有效部分数据
     @param start 指定范围的起始
     @param end 指定范围的结束
     @return 返回新的缓存对象
     */
    Buffer slice(Integer start, Integer end);

    /*! @brief 把当前对象中的所有元素放入一个字符串
     @param separator 分割字符，缺省为 ","
     @return 返回生成的字符串
     */
    String join(String separator = ",");

    /*! @brief 返回一个新缓存对象，包含当前对象数据的倒序
     @return 返回新的缓存对象
     */
    Buffer reverse();

    /*! @brief 比较当前对象与给定的对象是否相等
     @param expected 制定比较的目标对象
     @return 返回对象比较的结果
    */
    Boolean equals(object expected);

    /*! @brief 使用 16 进制编码缓存对象内容
     @return 返回编码字符串
     */
    String hex();

    /*! @brief 使用 base64 编码缓存对象内容
     @return 返回编码字符串
     */
    String base64();

    /*! @brief 返回全部二进制数据的数组
     @return 返回包含对象数据索引的迭代器
    */
    Iterator keys();

    /*! @brief 返回全部二进制数据的数组
     @return 返回包含对象数据值的迭代器
    */
    Iterator values();

    /*! @brief 返回包含对象数据 [index, byte] 对的迭代器
     @return [index, byte] 对的迭代器
    ```JavaScript
        const buf = Buffer.from('buffer');

        // Prints:
        //   [0, 98]
        //   [1, 117]
        //   [2, 102]
        //   [3, 102]
        //   [4, 101]
        //   [5, 114]
        for (const pair of buf.entries()) {
            console.log(pair);
        }
    ```
    */
    Iterator entries();

    /*! @brief 返回全部二进制数据的数组
     @return 返回包含对象数据的数组
    */
    Array toArray();

    /*! @brief 返回二进制数据的编码字符串
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @param offset 读取起始位置
     @param end 读取终止位置
     @return 返回对象的字符串表示
    */
    String toString(String codec, Integer offset = 0, Integer end);

    /*! @brief 返回二进制数据的编码字符串
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @param offset 读取起始位置
     @return 返回对象的字符串表示
    */
    String toString(String codec, Integer offset = 0);

    /*! @brief 返回二进制数据的 utf8 编码字符串
     @return 返回对象的字符串表示
    */
    String toString();
};
