/*! @brief x509 证书请求对象

 X509Req 对象属于 crypto 模块，创建：
 ```JavaScript
 var k = new crypto.X509Req();
 ```
 */
interface X509Req : object
{
    /*! @brief X509Req 构造函数 */
    X509Req();

    /*! @brief X509Req 构造函数，根据给定的信息创建一个证书请求
     @param subject 证书的主题可分辨名称
     @param key 证书的公钥
     @param hash 证书摘要算法，缺省为 hash.SHA1
    */
    X509Req(String subject, PKey key, Integer hash = hash.SHA1);

    /*! @brief X509Req 构造函数，加载一个 DER 格式的证书请求
     @param derReq DER 格式的证书请求
    */
    X509Req(Buffer derReq);

    /*! @brief X509Req 构造函数，加载一个 PEM 格式的证书请求
     @param pemReq DER 格式的证书请求
    */
    X509Req(String pemReq);

    /*! @brief 加载一个 DER 格式的证书请求
     @param derReq DER 格式的证书请求
    */
    load(Buffer derReq);

    /*! @brief 加载一个 PEM 格式的证书请求
     @param pemReq PEM 格式的证书请求
    */
    load(String pemReq);

    /*! @brief 加载一个 PEM/DER 格式的证书请求，可多次调用
     @param filename 证书请求文件名
    */
    loadFile(String filename);

    /*! @brief 返回当前证书请求的 PEM 格式编码
     @return 当前证书请求的 PEM 格式编码
    */
    String exportPem();

    /*! @brief 返回当前证书请求的 DER 格式编码
     @return 当前证书请求的 DER 格式编码
    */
    Buffer exportDer();

    /*! @brief 签名当前证书请求为正式证书

    opts 接收的字段如下：
    ```JavaScript
    {
        ca: false,      // 证书为 ca，缺省为 false
        pathlen: -1,    // 证书深度，缺省为 -1
        notBefore: "",  // 证书生效时间，缺省为当前时间
        notAfter: "",   // 证书失效时间，缺省为 notBefore 后一年
        usage: "",      // 证书使用范围，接收：digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment, keyAgreement, keyCertSign, cRLSign
        type: ""        // 证书 Netscape 证书类型，接收：client, server, email, objsign, reserved, sslCA, emailCA, objCA
    }
    ```
     @param issuer 签名机构的可分辨名称
     @param key 签名机构的私钥
     @param opts 其他可选参数
     @return 返回签名后的正式证书
     */
    X509Cert sign(String issuer, PKey key, Object opts = {}) async;

    /*! @brief 获取证书的主题可分辨名称 */
    readonly String subject;

    /*! @brief 获取证书的公钥 */
    readonly PKey publicKey;
};
