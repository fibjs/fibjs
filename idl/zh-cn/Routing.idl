/*! @brief 消息处理器路由对象

 路由对象根据设定的规则匹配消息，将消息传递给符合规则的第一个处理器。后加入的路由规则优先匹配。创建方法：
 ```JavaScript
 var routing = new mq.Routing({
   "^/func1(/.*)$": func1,
   "^/func2(/.*)$": func2
 });
 ```
 正则表达式匹配的项目修改消息的 value 属性，子项目存入消息的 params 属性。例如：
 ```JavaScript
 var routing = new mq.Routing({
   "^/func1(/([0-9]+)/([0-9]+)\.html)$": func1,
 });
 ```
 匹配消息 "/func1/123/456.html" 后，value == "/123/456.html"，params == ["123", "456"];

 如果匹配的结果没有子项，则 value 为空，params 为空。例如：
 ```JavaScript
 var routing = new mq.Routing({
   "^/func1/[0-9]+/[0-9]+\.html$": func1,
 });
 ```
 匹配消息 "/func1/123/456.html" 后，value == ""，params == [];

 如果匹配的结果第一级有多个子项，则 value 为空，params 为第一级子项。例如：
 ```JavaScript
 var routing = new mq.Routing({
   "^/func1/([0-9]+)/([0-9]+)\.html$": func1,
 });
 ```
 匹配消息 "/func1/123/456.html" 后，value == ""，params == ["123", "456"];

 如果匹配的结果只有一个子项，并且无下级子项，则 value 和 params 均为此子项。例如：
 ```JavaScript
 var routing = new mq.Routing({
   "^/func1/([0-9]+)/[0-9]+\.html$": func1,
 });
 ```
 匹配消息 "/func1/123/456.html" 后，value == "123"，params == ["123"];
 */
interface Routing : Handler
{
    /*! @brief 创建一个消息处理器路由对象
   @param map 初始化路由参数
   */
    Routing(Object map = {});

    /*! @brief 创建一个消息处理器路由对象
   @param method 指定 http 请求方法，"*" 接受所有方法
   @param map 初始化路由参数
   */
    Routing(String method, Object map);

    /*! @brief 从已有路由对象中添加规则，添加后原路由将被清空
   @param route 已经初始化的路由对象
   */
    append(Routing route);

    /*! @brief 添加一组路由规则
   @param map 路由参数
   */
    append(Object map);

    /*! @brief 添加一条路由规则
   @param pattern 消息匹配格式
   @param hdlr 内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler
   */
    append(String pattern, Handler hdlr);

    /*! @brief 添加一组路由规则
   @param method 指定 http 请求方法，"*" 接受所有方法
   @param map 路由参数
   */
    append(String method, Object map);

    /*! @brief 添加一条路由规则
   @param method 指定 http 请求方法，"*" 接受所有方法
   @param pattern 消息匹配格式
   @param hdlr 内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler
   */
    append(String method, String pattern, Handler hdlr);

    /*! @brief 添加一组接受所有 http 方法路由规则
   @param map 路由参数
   */
    all(Object map);

    /*! @brief 添加一条接受所有 http 方法路由规则
   @param pattern 消息匹配格式
   @param hdlr 内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler
   */
    all(String pattern, Handler hdlr);

    /*! @brief 添加一组 GET 方法路由规则
   @param map 路由参数
   */
    get(Object map);

    /*! @brief 添加一条接受 http GET 方法路由规则
   @param pattern 消息匹配格式
   @param hdlr 内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler
   */
    get(String pattern, Handler hdlr);

    /*! @brief 添加一组接受 http POST 方法路由规则
   @param map 路由参数
   */
    post(Object map);

    /*! @brief 添加一条接受 http POST 方法路由规则
   @param pattern 消息匹配格式
   @param hdlr 内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler
   */
    post(String pattern, Handler hdlr);

    /*! @brief 添加一组接受 http DELETE 方法路由规则
   @param map 路由参数
   */
    del(Object map);

    /*! @brief 添加一条接受 http DELETE 方法路由规则
   @param pattern 消息匹配格式
   @param hdlr 内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler
   */
    del(String pattern, Handler hdlr);

    /*! @brief 添加一组 PUT 方法路由规则
   @param map 路由参数
   */
    put(Object map);

    /*! @brief 添加一条接受 http PUT 方法路由规则
   @param pattern 消息匹配格式
   @param hdlr 内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler
   */
    put(String pattern, Handler hdlr);

    /*! @brief 添加一组 PATCH 方法路由规则
   @param map 路由参数
   */
    patch(Object map);

    /*! @brief 添加一条接受 http PATCH 方法路由规则
   @param pattern 消息匹配格式
   @param hdlr 内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler
   */
    patch(String pattern, Handler hdlr);
};
