
/*! @brief websocket 支持模块

 使用方法：
 ```JavaScript
 var ws = require('ws');
 ```
 创建一个服务器：
 ```JavaScript
 var ws = require('ws');
 var http = require('http');

 var svr = new http.Server(80, {
     '/ws': ws.upgrade((conn, req) => {
         conn.onmessage = e => console.log(e.data);
     })
 });
 svr.run();
 ```
 使用 WebSocket 客户端：
 ```JavaScript
 var ws = require('ws');
 
 var conn = new ws.Socket('ws://127.0.0.1/ws');
 conn.onmessage = e => console.log(e.data);
 ```
 */
module ws
{
    /*! @brief 指定 websocket 消息类型 0，代表一个继续帧 */
    const CONTINUE = 0;

    /*! @brief 指定 websocket 消息类型 1，代表一个文本帧 */
    const TEXT = 1;

    /*! @brief 指定 websocket 消息类型 2，代表一个二进制帧 */
    const BINARY = 2;

    /*! @brief 指定 websocket 消息类型 8，连接关闭 */
    const CLOSE = 8;

    /*! @brief 指定 websocket 消息类型 9，代表一个 ping 帧 */
    const PING = 9;

    /*! @brief 指定 websocket 消息类型 10，代表一个 pong 帧 */
    const PONG = 10;

    /*! @brief 指定 WebSocket 状态，表示正在连接中*/
    const CONNECTING = 0;

    /*! @brief 指定 WebSocket 状态，表示打开状态*/
    const OPEN = 1;

    /*! @brief 指定 WebSocket 状态，表示已发送 CLOSE 消息，等待关闭中*/
    const CLOSING = 2;

    /*! @brief 指定 WebSocket 状态，表示已经关闭*/
    const CLOSED = 3;

    /*! @brief 创建一个 websocket 消息对象，参见 WebSocketMessage */
    static WebSocketMessage new Message();

    /*! @brief WebSocket 对象，参见 WebSocket */
    static WebSocket new Socket();

    /*! @brief 创建一个 websocket 协议处理器，从 http 接收 upgrade 请求并握手，生成 WebSocket 对象
     accept 函数调用时，将传递两个参数，第一个参数为接收到的 WebSocket 对象，第二个参数为握手时的 HttpRequest 对象。
     @param accept 连接成功处理函数
     @return 返回协议处理器，可与 HttpServer, Chain, Routing 等对接
     */
    static Handler upgrade(Function accept);
};
