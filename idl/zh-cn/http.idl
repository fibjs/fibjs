/*! @brief http 模块封装了 HTTP 请求和响应的处理，让我们可以轻松地创建一个 http 服务器，也可以模拟客户端发起 http 请求。使用 http 模块，开发者可以很方便地编写和处理 HTTP 协议相关的代码

下面是一个简单的例子，创建一个 Web 服务器，返回一个 hello world 的响应信息：

```JavaScript
const http = require('http');

const server = new http.Server(8080, function(request) {
  request.response.write('Hello World!');
});

server.start();
```

这个例子中，我们引入 http 模块，然后定义了一个 http 服务器对象，并绑定到本地 8080 端口号。当有请求发送到这个端口号，响应会被设置为字符串 “Hello World!”。

同时 http 模块还包含客户端对象，http.Client 模拟浏览器环境缓存 cookie，并在访问 url 的时候携带对应的 cookie 的 http 客户端对象。你可以用 http.Client 访问 http 接口请求、进行 http 下载等等一系列 http 相关的操作。下面是 http.Client 的应用示例：

```JavaScript
var http = require('http');

var httpClient = new http.Client();
httpClient.get('http://fibjs.org');
```

在上面的示例中，创建了一个 http.Client 对象，然后调用 `get` 方法想 fibjs.org 发起了 http GET 请求。

另外，http.Client 还有其他一些属性和方法可以被调用，如 `cookies` 等

https 模块是 http 模块的别名，使用 `require('https')` 同样可以得到 http 模块。
*/
module http
{
    /*! @brief 创建一个 http 请求对象，参见 HttpRequest */
    static HttpRequest new Request();

    /*! @brief 创建一个 http 响应对象，参见 HttpResponse */
    static HttpResponse new Response();

    /*! @brief 创建一个 http cookie 对象，参见 HttpCookie */
    static HttpCookie new Cookie();

    /*! @brief 创建一个 http 服务器，参见 HttpServer */
    static HttpServer new Server();

    /*! @brief 创建一个 http 客户端，参见 HttpClient */
    static HttpClient new Client();

    /*! @brief 创建一个 https 服务器，参见 HttpsServer */
    static HttpsServer new HttpsServer();

    /*! @brief 创建一个 http 协议处理器对象，参见 HttpHandler */
    static HttpHandler new Handler();

    /*! @brief 创建一个 http 请求转发处理器对象，参见 HttpRepeater */
    static HttpRepeater new Repeater();

    /*! @brief 返回标准的 HTTP 响应状态码的集合，以及各自的简短描述。 */
    static readonly Object STATUS_CODES;

    /*! @brief 返回http客户端的 HttpCookie 对象列表 */
    static readonly NArray cookies;

    /*! @brief 查询和设定是否保持连接 */
    static Boolean keepAlive;

    /*! @brief 查询和设置超时时间 */
    static Integer timeout;

    /*! @brief cookie 功能开关，默认开启 */
    static Boolean enableCookie;

    /*! @brief 自动 redirect 功能开关，默认开启 */
    static Boolean autoRedirect;

    /*! @brief 自动解压缩功能开关，默认开启 */
    static Boolean enableEncoding;

    /*! @brief 查询和设置最大请求头个数，缺省为 128 */
    static Integer maxHeadersCount;

    /*! @brief 查询和设置最大请求头长度，缺省为 8192 */
    static Integer maxHeaderSize;

    /*! @brief 查询和设置 body 最大尺寸，以 MB 为单位，缺省为 -1，不限制尺寸 */
    static Integer maxBodySize;

    /*! @brief 查询和设置 http 请求中的浏览器标识 */
    static String userAgent;

    /*! @brief 查询和设置 keep-alive 最大缓存连接数，缺省 128 */
    static Integer poolSize;

    /*! @brief 查询和设置 keep-alive 缓存连接超时时间，缺省 10000 ms */
    static Integer poolTimeout;

    /*! @brief 查询和设置 http 请求代理，支持 http/https/socks5 代理 */
    static String http_proxy;

    /*! @brief 查询和设置 https 请求代理，支持 http/https/socks5 代理，不设置，或者设置为空，则复用 http_proxy */
    static String https_proxy;

    /*! @brief 创建一个 http 静态文件处理器，用以用静态文件响应 http 消息

     fileHandler 支持 gzip 预压缩，当请求接受 gzip 编码，且相同路径下 filename.ext.gz 文件存在时，将直接返回此文件，
     从而避免重复压缩带来服务器负载。
     @param root 文件根路径
     @param mimes 扩展 mime 设置
     @param autoIndex 是否支持浏览目录文件，缺省为 false，不支持
     @return 返回一个静态文件处理器用于处理 http 消息
     */
    static Handler fileHandler(String root, Object mimes = {}, Boolean autoIndex = false);

    /*! @brief 发送 http 请求到指定的流对象，并返回结果
     @param conn 指定处理请求的流对象
     @param req 要发送的 HttpRequest 对象
     @return 返回服务器响应
     */
    static HttpResponse request(Stream conn, HttpRequest req) async;

    /*! @brief 发送 http 请求到指定的流对象，并返回结果
     @param conn 指定处理请求的流对象
     @param req 要发送的 HttpRequest 对象
     @param response_body 指定 response.body 的流
     @return 返回服务器响应
     */
    static HttpResponse request(Stream conn, HttpRequest req, SeekableStream response_body) async;

    /*! @brief 请求指定的 url，并返回结果
     opts 包含请求的附加选项，支持的内容如下：
     ```JavaScript
     {
         "method": "GET", // specify the http request method: GET, POST, etc, default: GET.
         "protocol": "http",
         "slashes": true,
         "username": "",
         "password": "",
         "hostname": "",
         "port": "",
         "pathname": "",
         "keepAlive": unknown, // If not specified, the default settings of the client will be used.
         "query": {},
         "body": SeekableStream | Buffer | String | {},
         "json": {},
         "pack": {},
         "headers": {},
         "response_body": SeekableStream // specify response.body stream
     }
     ```
     其中 body，json，pack 不得同时出现。缺省为 {}，不包含任何附加信息
     @param method 指定 http 请求方法：GET, POST 等
     @param url 指定 url，必须是包含主机的完整 url
     @param opts 指定附加信息
     @return 返回服务器响应
     */
    static HttpResponse request(String method, String url, Object opts = {}) async;

    /*! @brief 用 GET 方法请求指定的 url，并返回结果，等同于 request("GET", ...)
     opts 包含请求的附加选项，支持的内容如下：
     ```JavaScript
     {
         "method": "GET", // specify the http request method: GET, POST, etc, default: GET.
         "protocol": "http",
         "slashes": true,
         "username": "",
         "password": "",
         "hostname": "",
         "port": "",
         "pathname": "",
         "keepAlive": unknown, // If not specified, the default settings of the client will be used.
         "query": {},
         "body": SeekableStream | Buffer | String | {},
         "json": {},
         "pack": {},
         "headers": {}
     }
     ```
     其中 body，json，pack 不得同时出现。缺省为 {}，不包含任何附加信息
     @param url 指定 url，必须是包含主机的完整 url
     @param opts 指定附加信息
     @return 返回服务器响应
     */
    static HttpResponse request(String url, Object opts = {}) async;

    /*! @brief 请求 opts 指定的 url，并返回结果
     opts 包含请求的附加选项，支持的内容如下：
     ```JavaScript
     {
         "method": "GET", // specify the http request method: GET, POST, etc, default: GET.
         "protocol": "http",
         "slashes": true,
         "username": "",
         "password": "",
         "hostname": "",
         "port": "",
         "pathname": "",
         "keepAlive": unknown, // If not specified, the default settings of the client will be used.
         "query": {},
         "body": SeekableStream | Buffer | String | {},
         "json": {},
         "pack": {},
         "headers": {}
     }
     ```
     其中 body，json，pack 不得同时出现。缺省为 {}，不包含任何附加信息
     @param opts 指定附加信息
     @return 返回服务器响应
     */
    static HttpResponse request(Object opts) async;

    /*! @brief 用 GET 方法请求指定的 url，并返回结果，等同于 request("GET", ...)
     opts 包含请求的附加选项，支持的内容如下：
     ```JavaScript
     {
         "method": "GET", // specify the http request method: GET, POST, etc, default: GET.
         "protocol": "http",
         "slashes": true,
         "username": "",
         "password": "",
         "hostname": "",
         "port": "",
         "pathname": "",
         "keepAlive": unknown, // If not specified, the default settings of the client will be used.
         "query": {},
         "body": SeekableStream | Buffer | String | {},
         "json": {},
         "pack": {},
         "headers": {}
     }
     ```
     其中 body，json，pack 不得同时出现。缺省为 {}，不包含任何附加信息
     @param url 指定 url，必须是包含主机的完整 url
     @param opts 指定附加信息
     @return 返回服务器响应
     */
    static HttpResponse get(String url, Object opts = {}) async;

    /*! @brief 用 POST 方法请求指定的 url，并返回结果，等同于 request("POST", ...)
     opts 包含请求的附加选项，支持的内容如下：
     ```JavaScript
     {
         "method": "GET", // specify the http request method: GET, POST, etc, default: GET.
         "protocol": "http",
         "slashes": true,
         "username": "",
         "password": "",
         "hostname": "",
         "port": "",
         "pathname": "",
         "keepAlive": unknown, // If not specified, the default settings of the client will be used.
         "query": {},
         "body": SeekableStream | Buffer | String | {},
         "json": {},
         "pack": {},
         "headers": {}
     }
     ```
     其中 body，json，pack 不得同时出现。缺省为 {}，不包含任何附加信息
     @param url 指定 url，必须是包含主机的完整 url
     @param opts 指定附加信息
     @return 返回服务器响应
     */
    static HttpResponse post(String url, Object opts = {}) async;

    /*! @brief 用 DELETE 方法请求指定的 url，并返回结果，等同于 request("DELETE", ...)
     opts 包含请求的附加选项，支持的内容如下：
     ```JavaScript
     {
         "method": "GET", // specify the http request method: GET, POST, etc, default: GET.
         "protocol": "http",
         "slashes": true,
         "username": "",
         "password": "",
         "hostname": "",
         "port": "",
         "pathname": "",
         "keepAlive": unknown, // If not specified, the default settings of the client will be used.
         "query": {},
         "body": SeekableStream | Buffer | String | {},
         "json": {},
         "pack": {},
         "headers": {}
     }
     ```
     其中 body，json，pack 不得同时出现。缺省为 {}，不包含任何附加信息
     @param url 指定 url，必须是包含主机的完整 url
     @param opts 指定附加信息
     @return 返回服务器响应
     */
    static HttpResponse del(String url, Object opts = {}) async;

    /*! @brief 用 PUT 方法请求指定的 url，并返回结果，等同于 request("PUT", ...)
     opts 包含请求的附加选项，支持的内容如下：
     ```JavaScript
     {
         "method": "GET", // specify the http request method: GET, POST, etc, default: GET.
         "protocol": "http",
         "slashes": true,
         "username": "",
         "password": "",
         "hostname": "",
         "port": "",
         "pathname": "",
         "keepAlive": unknown, // If not specified, the default settings of the client will be used.
         "query": {},
         "body": SeekableStream | Buffer | String | {},
         "json": {},
         "pack": {},
         "headers": {}
     }
     ```
     其中 body，json，pack 不得同时出现。缺省为 {}，不包含任何附加信息
     @param url 指定 url，必须是包含主机的完整 url
     @param opts 指定附加信息
     @return 返回服务器响应
     */
    static HttpResponse put(String url, Object opts = {}) async;

    /*! @brief 用 PATCH 方法请求指定的 url，并返回结果，等同于 request("PATCH", ...)
     opts 包含请求的附加选项，支持的内容如下：
     ```JavaScript
     {
         "method": "GET", // specify the http request method: GET, POST, etc, default: GET.
         "protocol": "http",
         "slashes": true,
         "username": "",
         "password": "",
         "hostname": "",
         "port": "",
         "pathname": "",
         "keepAlive": unknown, // If not specified, the default settings of the client will be used.
         "query": {},
         "body": SeekableStream | Buffer | String | {},
         "json": {},
         "pack": {},
         "headers": {}
     }
     ```
     其中 body，json，pack 不得同时出现。缺省为 {}，不包含任何附加信息
     @param url 指定 url，必须是包含主机的完整 url
     @param opts 指定附加信息
     @return 返回服务器响应
     */
    static HttpResponse patch(String url, Object opts = {}) async;

    /*! @brief 用 HEAD 方法请求指定的 url，并返回结果，等同于 request("HEAD", ...)
     opts 包含请求的附加选项，支持的内容如下：
     ```JavaScript
     {
         "method": "GET", // specify the http request method: GET, POST, etc, default: GET.
         "protocol": "http",
         "slashes": true,
         "username": "",
         "password": "",
         "hostname": "",
         "port": "",
         "pathname": "",
         "keepAlive": unknown, // If not specified, the default settings of the client will be used.
         "query": {},
         "body": SeekableStream | Buffer | String | {},
         "json": {},
         "pack": {},
         "headers": {}
     }
     ```
     其中 body，json，pack 不得同时出现。缺省为 {}，不包含任何附加信息
     @param url 指定 url，必须是包含主机的完整 url
     @param opts 指定附加信息
     @return 返回服务器响应
     */
    static HttpResponse head(String url, Object opts = {}) async;
};
