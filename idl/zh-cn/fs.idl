
/*! @brief 文件系统处理模块

 使用方法：
 ```JavaScript
 var fs = require('fs');
 ```

 一些注意点:

 - 运行 `fs.watch(filename)` 会返回一个继承自 EventEmitter 的 watcher, 它支持 'change', 'changeonly', 'renameonly' 三个事件
 */
module fs
{
    /*! @brief seek 方式常量，移动到绝对位置 */
    const SEEK_SET = 0;

    /*! @brief seek 方式常量，移动到当前位置的相对位置 */
    const SEEK_CUR = 1;

    /*! @brief seek 方式常量，移动到文件结尾的相对位置 */
    const SEEK_END = 2;

    /*! fs模块的常量对象 */
    static readonly Object constants;

    /*! @brief 查询指定的文件或目录是否存在
     @param path 指定要查询的路径
     @return 返回 True 表示文件或目录存在
     */
    static Boolean exists(String path) async;

    /*! @brief 查询用户对指定的文件的权限
     @param path 指定要查询的路径
     @param mode 指定查询的权限,默认为文件是否存在
     */
    static access(String path, Integer mode = 0) async;

    /*! @brief 创建硬链接文件, windows 下不支持此方法
     @param oldPath 源文件
     @param newPath 将要被创建的文件
     */
    static link(String oldPath, String newPath) async;

    /*! @brief 删除指定的文件
     @param path 指定要删除的路径
     */
    static unlink(String path) async;

    /*! @brief 创建一个目录
     @param path 指定要创建的目录名
     @param mode 指定文件权限，Windows 忽略此参数
     */
    static mkdir(String path, Integer mode = 0777) async;

    /*! @brief 删除一个目录
     @param path 指定要删除的目录名
     */
    static rmdir(String path) async;

    /*! @brief 重新命名一个文件
     @param from 指定更名的文件
     @param to 指定要修改的新文件名
     */
    static rename(String from, String to) async;

    /*! @brief 复制一个文件
     @param from 指定更名的文件
     @param to 指定要修改的新文件名
     */
    static copy(String from, String to) async;

    /*! @brief 设置指定文件的访问权限，Windows 不支持此方法
     @param path 指定操作的文件
     @param mode 指定设定的访问权限
     */
    static chmod(String path, Integer mode) async;

    /*! @brief 设置指定文件的访问权限，若文件是软连接则不改变指向文件的权限，只在macOS、BSD 系列平台上可用
     @param path 指定操作的文件
     @param mode 指定设定的访问权限
     */
    static lchmod(String path, Integer mode) async;

    /*! @brief 设置指定文件的拥有者，Windows 不支持此方法
     @param path 指定设置的文件
     @param uid 文件拥有者用户id
     @param gid 文件拥有者组id
     */
    static chown(String path, Integer uid, Integer gid) async;

    /*! @brief 设置指定文件的拥有者，如果指定的文件是软连接则不会改变其指向文件的拥有者，Windows 不支持此方法
     @param path 指定设置的文件
     @param uid 文件拥有者用户id
     @param gid 文件拥有者组id
     */
    static lchown(String path, Integer uid, Integer gid) async;

    /*! @brief 查询指定文件的基础信息
     @param path 指定查询的文件
     @return 返回文件的基础信息
     */
    static Stat stat(String path) async;

    /*! @brief 查询指定文件的基础信息, 和stat不同的是, 当path是一个软连接的时候，返回的将是这个软连接的信息而不是指向的文件的信息
     @param path 指定查询的文件
     @return 返回文件的基础信息
     */
    static Stat lstat(String path) async;

    /*! @brief 读取指定的软连接文件, windows 下不支持此方法
     @param path 指定读取的软连接文件
     @return 返回软连接指向的文件名
     */
    static String readlink(String path) async;

    /*! @brief 返回指定路径的绝对路径，如果指定路径中包含相对路径也会被展开
     @param path 指定读取的路径
     @return 返回处理后的绝对路径
     */
    static String realpath(String path) async;

    /*! @brief 创建软连接文件
     @param target 目标文件，可以是文件、目录、或不存在的路径
     @param linkpath 将被创建的软连接文件
     @param type 创建的软连接类型, 可选类型为'file', 'dir', 'junction', 默认为'file', 该参数只在windows上有效，当为'junction'的时候将要创建的目标路径linkpath必须为绝对路径, 而target则会被自动转化为绝对路径。
     */
    static symlink(String target, String linkpath, String type = "file") async;

    /*! @brief 修改文件尺寸,如果指定的长度大于源文件大小则用'\0'填充，否则多于的文件内容将丢失
     @param path 指定被修改文件的路径
     @param len 指定修改后文件的大小
     */
    static truncate(String path, Integer len) async;

    /*! @brief 根据文件描述符，读取文件内容
     @param fd 文件描述符
     @param buffer 读取结果写入的 Buffer 对象
     @param offset Buffer 写入偏移量， 默认为 0
     @param length 文件读取字节数，默认为 0
     @param position 文件读取位置，默认为当前文件位置
     @return 实际读取的字节数
     */
    static Integer read(Integer fd, Buffer buffer, Integer offset = 0, Integer length = 0, Integer position = -1) async;

    /*! @brief 根据文件描述符，改变文件模式。只在 POSIX 系统有效。
     @param fd 文件描述符
     @param mode 文件的模式
     */
    static fchmod(Integer fd, Integer mode) async;

    /*! @brief 根据文件描述符，改变所有者。只在 POSIX 系统有效。
     @param fd 文件描述符
     @param uid 用户id
     @param gid 组id
     */
    static fchown(Integer fd, Integer uid, Integer gid) async;

    /*! @brief 根据文件描述符，同步数据到磁盘
     @param fd 文件描述符
     */
    static fdatasync(Integer fd) async;

    /*! @brief 根据文件描述符，同步数据到磁盘
     @param fd 文件描述符
     */
    static fsync(Integer fd) async;

    /*! @brief 读取指定目录的文件信息
     @param path 指定查询的目录
     @return 返回目录的文件信息数组
     */
    static NArray readdir(String path) async;

    /*! @brief 打开文件，用于读取，写入，或者同时读写

     参数 flags 支持的方式如下：
     - 'r' 只读方式，文件不存在则抛出错误。
     - 'r+' 读写方式，文件不存在则抛出错误。
     - 'w' 只写方式，文件不存在则自动创建，存在则将被清空。
     - 'w+' 读写方式，文件不存在则自动创建。
     - 'a' 只写添加方式，文件不存在则自动创建。
     - 'a+' 读写添加方式，文件不存在则自动创建。
     @param fname 指定文件名
     @param flags 指定文件打开方式，缺省为 "r"，只读方式
     @return 返回打开的文件对象
     */
    static SeekableStream openFile(String fname, String flags = "r") async;

    /*! @brief 打开文件描述符

     参数 flags 支持的方式如下：
     - 'r' 只读方式，文件不存在则抛出错误。
     - 'r+' 读写方式，文件不存在则抛出错误。
     - 'w' 只写方式，文件不存在则自动创建，存在则将被清空。
     - 'w+' 读写方式，文件不存在则自动创建。
     - 'a' 只写添加方式，文件不存在则自动创建。
     - 'a+' 读写添加方式，文件不存在则自动创建。
     @param fname 指定文件名
     @param flags 指定文件打开方式，缺省为 "r"，只读方式
     @param mode 当创建文件的时候，指定文件的模式，默认 0666
     @return 返回打开的文件描述符
     */
    static Integer open(String fname, String flags = "r", Integer mode = 0666) async;

    /*! @brief 关闭文件描述符
     @param fd 文件描述符
     */
    static close(Integer fd) async;

    /*! @brief 打开文本文件，用于读取，写入，或者同时读写

     参数 flags 支持的方式如下：
     - 'r' 只读方式，文件不存在则抛出错误。
     - 'r+' 读写方式，文件不存在则抛出错误。
     - 'w' 只写方式，文件不存在则自动创建，存在则将被清空。
     - 'w+' 读写方式，文件不存在则自动创建。
     - 'a' 只写添加方式，文件不存在则自动创建。
     - 'a+' 读写添加方式，文件不存在则自动创建。
     @param fname 指定文件名
     @param flags 指定文件打开方式，缺省为 "r"，只读方式
     @return 返回打开的文件对象
     */
    static BufferedStream openTextStream(String fname, String flags = "r") async;

    /*! @brief 打开文本文件，并读取内容
     @param fname 指定文件名
     @return 返回文件文本内容
     */
    static String readTextFile(String fname) async;

    /*! @brief 打开二进制文件，并读取内容
     @param fname 指定文件名
     @param encoding 指定解码方式，缺省不解码
     @return 返回文件文本内容
     */
    static Variant readFile(String fname, String encoding = "") async;

    /*! @brief 打开文件，以数组方式读取一组文本行，行结尾标识基于 EOL 属性的设置，缺省时，posix:"\n"；windows:"\r\n"
     @param fname 指定文件名
     @param maxlines 指定此次读取的最大行数，缺省读取全部文本行
     @return 返回读取的文本行数组，若无数据可读，或者连接中断，空数组
     */
    static Array readLines(String fname, Integer maxlines = -1);

    /*! @brief 创建文本文件，并写入内容
     @param fname 指定文件名
     @param txt 指定要写入的字符串
     */
    static writeTextFile(String fname, String txt) async;

    /*! @brief 创建二进制文件，并写入内容
     @param fname 指定文件名
     @param data 指定要写入的二进制数据
     */
    static writeFile(String fname, Buffer data) async;

    /*! @brief 创建二进制文件，并写入内容
     @param fname 指定文件名
     @param data 指定要写入的二进制数据
     */
    static appendFile(String fname, Buffer data) async;

    /*! @brief 设置 zip 虚拟文件映射
     @param fname 指定映射路径
     @param data 指定映射的 zip 文件数据
     */
    static setZipFS(String fname, Buffer data);

    /*! @brief 清除 zip 虚拟文件映射
     @param fname 指定映射路径，缺省清除全部缓存
     */
    static clearZipFS(String fname = "");

    /*! @brief 观察一个文件, 返回对应的 watcher 对象
     @param fname 指定要观察的文件对象
     */
    static FSWatcher watch(String fname);

    /*! @brief 观察一个文件, 返回对应的 watcher 对象
     @param fname 指定要观察的文件对象
     @param callback 当文件对象发生变化时的处理回调
     */
    static FSWatcher watch(String fname, Function callback);

    /*! @brief 观察一个文件, 返回对应的 watcher 对象
     @param fname 指定要观察的文件对象
     @param options 观察选项
     @param options.persistent {boolean} default: true 是否只要目标文件还在被观察, 进程就不退出
     @param options.recursive {boolean} default: false 对于 fname 为文件夹的情况, 是否递归地观察其下所有的子目录
     @param options.encoding {enum} default: 'utf8' 指定解析传入的 fname 的字符编码
     */
    static FSWatcher watch(String fname, Object options);

    /*! @brief 观察一个文件, 返回对应的 watcher 对象
     @param fname 指定要观察的文件对象
     @param options 观察选项
     @param options.persistent {boolean} default: true 是否只要目标文件还在被观察, 进程就不退出
     @param options.recursive {boolean} default: false 对于 fname 为文件夹的情况, 是否递归地观察其下所有的子目录
     @param options.encoding {enum} default: 'utf8' 指定解析传入的 fname 的字符编码
     @param callback 当文件对象发生变化时的处理回调
     */
    static FSWatcher watch(String fname, Object options, Function callback);
};
