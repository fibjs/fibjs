/*! @brief 不对称加密算法对象

 PKey 对象属于 crypto 模块，创建：
 ```JavaScript
 var k = new crypto.PKey();
 ```
 */
interface PKey : object
{
    /*! @brief 通过 DER 格式的密钥构造 PKey
     @param DerKey DER 格式的密钥
     @param password 解密密码
    */
    PKey(Buffer DerKey, String password = "");

    /*! @brief 通过 PEM 格式的密钥构造 PKey
     @param pemKey PEM 格式的密钥
     @param password 解密密码
    */
    PKey(String pemKey, String password = "");

    /*! @brief 通过 JSON 格式的密钥构造 PKey

     jsonKey 的格式支持以下四种，RSA 私钥：
     ```JavaScript
     {
        "kty": "RSA",
        "n": "0m5lvKpWqy9JS7tV2HIPqHCYHLquSuxIC3F8strIQLJKO3rZmTT96KTnhsOfBO7Y1bI7mnT0PB3_vcHd9ekWMEoZJQw7MuB8KeM_Wn54-elJr5DNLk5bMppSGxX7ZnumiXGG51_X3Yp-_EbGtDG80GxXXix7Mucyo7K25uE0uW8=",
        "e": "AQAB",
        "d": "agN2O9NxMHL1MTMi75WfL9Pxvl-KWXKqZSF6mjzAsF9iKI8euyHIXYFepzU8kual1RsjDhCnzvWqFvZplW8lXqrHf_P-rS_9Y4gBUw6pjnI_DnFIRwWHRvrUHHSCfWOdTCIKdOTkgLZuGFuhEY3RMIW0WSYejjLtftwy0RVxAzk=",
        "p": "6a4G1qmfwWmn1biigN7IVFlkbLf9oVe6g7rOmHxI-hn1GRxKDSVuAUrmR1IhuAnca9M0y7SD-7TUs6wjOxWxaw==",
        "q": "5ofkxFKdPBD0CQHMb9q13AMHUVe0rJ-hSjqqIBrmqApUOneyAcMV76M0QyIQnI2p3POa4Qu_7XChDwRVl7LlDQ==",
        "dp": "2mXGiGwCHl8j-FBWuID-1C6z-BRB3MBEVoeKPOOzxOPruatB3mWEGXsqG7A8SWgV9URxTI2K6P3J6Z7RUpBkvw==",
        "dq": "oagn5vfb5NQqnOpS9xkSsD67cfIj821ZSFlNFYhnuOzNVda7z_qCtnHm4zDPH0lEFXoKYMfBhfqWJpaugttjPQ==",
        "qi": "dqEQgxNmOVFrF4s776hTqeC6oEDila8EvpVb2F2ZvwAOLjCQ66OiAZK1BiYGHqUy0NeqNmtlsLSuBEZQZvqZwg=="
     }
     ```
     RSA 公钥：
     ```JavaScript
     {
        "kty": "RSA",
        "n": "0m5lvKpWqy9JS7tV2HIPqHCYHLquSuxIC3F8strIQLJKO3rZmTT96KTnhsOfBO7Y1bI7mnT0PB3_vcHd9ekWMEoZJQw7MuB8KeM_Wn54-elJr5DNLk5bMppSGxX7ZnumiXGG51_X3Yp-_EbGtDG80GxXXix7Mucyo7K25uE0uW8=",
        "e": "AQAB"
     }
     ```
     EC 私钥：
     ```JavaScript
     {
        "kty": "EC",
        "crv": "P-521",
        "x": "ATfNNFuuvlGxrTGoXgyfSAGgRNNDnO3rN3k74urKJdVS14RYhdnSwm91Bm-F1l-T1XKlAY2yRnzG9w1Ukvo8c0wL",
        "y": "ASBHqrruB6kdkEUB3vlW3-UIkk4HtKdUeTwN-7m3j2rgZvYR1ffRAapDvWqKGiBjomqWafxokBkbDI0c95f6f4XU",
        "d": "AfkIbUHXfW41njdpoKuqqKludcoLJS8D_oMEwkj-GVaXFNKccIoF5iKGu2c69kNDjo83R_7wyGlfRczsklkik1ST"
     }
     ```
     EC 公钥：
     ```JavaScript
     {
        "kty": "EC",
        "crv": "P-521",
        "x": "ATfNNFuuvlGxrTGoXgyfSAGgRNNDnO3rN3k74urKJdVS14RYhdnSwm91Bm-F1l-T1XKlAY2yRnzG9w1Ukvo8c0wL",
        "y": "ASBHqrruB6kdkEUB3vlW3-UIkk4HtKdUeTwN-7m3j2rgZvYR1ffRAapDvWqKGiBjomqWafxokBkbDI0c95f6f4XU"
     }
     ```
     @param jsonKey JSON 格式的密钥
    */
    PKey(Object jsonKey);

    /*! @brief 返回当前算法名称 */
    readonly String name;

    /*! @brief 返回当前算法密码长度，以位为单位 */
    readonly Integer keySize;

    /*! @brief 返回和设置当前对象签名算法 */
    String alg;

    /*! @brief 返回当前密钥的公钥
     @return 当前密钥的公钥
    */
    readonly PKey publicKey;

    /*! @brief 查询当前密钥是否为私钥
     @return 为 True 表示为私钥
    */
    Boolean isPrivate();

    /*! @brief 复制当前密钥
     @return 当前密钥的复制对象
    */
    PKey clone();

    /*! @brief 加载一个 DER 格式的密钥
     @param DerKey DER 格式的密钥
     @param password 解密密码
     @return 返回包含密钥的对象
    */
    static PKey from(Buffer DerKey, String password = "");

    /*! @brief 加载一个 PEM 格式的密钥
     @param pemKey PEM 格式的密钥
     @param password 解密密码
     @return 返回包含密钥的对象
    */
    static PKey from(String pemKey, String password = "");

    /*! @brief 加载一个 JSON 格式的密钥

     jsonKey 的格式支持以下四种，RSA 私钥：
     ```JavaScript
     {
        "kty": "RSA",
        "n": "0m5lvKpWqy9JS7tV2HIPqHCYHLquSuxIC3F8strIQLJKO3rZmTT96KTnhsOfBO7Y1bI7mnT0PB3_vcHd9ekWMEoZJQw7MuB8KeM_Wn54-elJr5DNLk5bMppSGxX7ZnumiXGG51_X3Yp-_EbGtDG80GxXXix7Mucyo7K25uE0uW8=",
        "e": "AQAB",
        "d": "agN2O9NxMHL1MTMi75WfL9Pxvl-KWXKqZSF6mjzAsF9iKI8euyHIXYFepzU8kual1RsjDhCnzvWqFvZplW8lXqrHf_P-rS_9Y4gBUw6pjnI_DnFIRwWHRvrUHHSCfWOdTCIKdOTkgLZuGFuhEY3RMIW0WSYejjLtftwy0RVxAzk=",
        "p": "6a4G1qmfwWmn1biigN7IVFlkbLf9oVe6g7rOmHxI-hn1GRxKDSVuAUrmR1IhuAnca9M0y7SD-7TUs6wjOxWxaw==",
        "q": "5ofkxFKdPBD0CQHMb9q13AMHUVe0rJ-hSjqqIBrmqApUOneyAcMV76M0QyIQnI2p3POa4Qu_7XChDwRVl7LlDQ==",
        "dp": "2mXGiGwCHl8j-FBWuID-1C6z-BRB3MBEVoeKPOOzxOPruatB3mWEGXsqG7A8SWgV9URxTI2K6P3J6Z7RUpBkvw==",
        "dq": "oagn5vfb5NQqnOpS9xkSsD67cfIj821ZSFlNFYhnuOzNVda7z_qCtnHm4zDPH0lEFXoKYMfBhfqWJpaugttjPQ==",
        "qi": "dqEQgxNmOVFrF4s776hTqeC6oEDila8EvpVb2F2ZvwAOLjCQ66OiAZK1BiYGHqUy0NeqNmtlsLSuBEZQZvqZwg=="
     }
     ```
     RSA 公钥：
     ```JavaScript
     {
        "kty": "RSA",
        "n": "0m5lvKpWqy9JS7tV2HIPqHCYHLquSuxIC3F8strIQLJKO3rZmTT96KTnhsOfBO7Y1bI7mnT0PB3_vcHd9ekWMEoZJQw7MuB8KeM_Wn54-elJr5DNLk5bMppSGxX7ZnumiXGG51_X3Yp-_EbGtDG80GxXXix7Mucyo7K25uE0uW8=",
        "e": "AQAB"
     }
     ```
     EC 私钥：
     ```JavaScript
     {
        "kty": "EC",
        "crv": "P-521",
        "x": "ATfNNFuuvlGxrTGoXgyfSAGgRNNDnO3rN3k74urKJdVS14RYhdnSwm91Bm-F1l-T1XKlAY2yRnzG9w1Ukvo8c0wL",
        "y": "ASBHqrruB6kdkEUB3vlW3-UIkk4HtKdUeTwN-7m3j2rgZvYR1ffRAapDvWqKGiBjomqWafxokBkbDI0c95f6f4XU",
        "d": "AfkIbUHXfW41njdpoKuqqKludcoLJS8D_oMEwkj-GVaXFNKccIoF5iKGu2c69kNDjo83R_7wyGlfRczsklkik1ST"
     }
     ```
     EC 公钥：
     ```JavaScript
     {
        "kty": "EC",
        "crv": "P-521",
        "x": "ATfNNFuuvlGxrTGoXgyfSAGgRNNDnO3rN3k74urKJdVS14RYhdnSwm91Bm-F1l-T1XKlAY2yRnzG9w1Ukvo8c0wL",
        "y": "ASBHqrruB6kdkEUB3vlW3-UIkk4HtKdUeTwN-7m3j2rgZvYR1ffRAapDvWqKGiBjomqWafxokBkbDI0c95f6f4XU"
     }
     ```
     @param jsonKey JSON 格式的密钥
     @return 返回包含密钥的对象
    */
    static PKey from(Object jsonKey);

    /*! @brief 返回当前 key 的 PEM 格式编码
     @return 当前 key 的 PEM 格式编码
    */
    String pem();

    /*! @brief 返回当前 key 的 DER 格式编码
     @return 当前 key 的 DER 格式编码
    */
    Buffer der();

    /*! @brief 返回当前 key 的 jwt 格式编码
     opts 支持以下参数:
     ```JavaScript
     {
       compress: false， 指定签名以压缩方式输出公钥
     }
     ```
     支持压缩的曲线为：secp192r1, secp192k1, secp256r1, secp256k1, brainpoolP256r1,
                    secp384r1, brainpoolP384r1, brainpoolP512r1, secp521r1, sm2

     @param opts 指定导出选项
     @return 当前 key 的 jwt 格式编码
    */
    Object json(Object opts = {});

    /*! @brief 比较两个公/私钥是否相同
     @param key 指定对方的公/私钥
     @return 相同则返回 true
     */
    Boolean equals(PKey key);

    /*! @brief 使用当前算法密码公钥加密数据
     @param data 指定要加密的数据
     @return 返回加密后的数据
     */
    Buffer encrypt(Buffer data) async;

    /*! @brief 使用当前算法密码私钥解密数据
     @param data 指定要解密的数据
     @return 返回解密后的数据
     */
    Buffer decrypt(Buffer data) async;

    /*! @brief 使用当前算法密码私钥签名数据
     opts 支持以下参数:
     ```JavaScript
     {
        alg: 0， 指定签名的 hash 算法，仅在 RSA 时有效，缺省为 0. 支持算法: 0=NONE,1=MD5,2=SHA1,3=SHA224,4=SHA256,5=SHA384,6=SHA512,7=RIPEMD160
        to: pk, 指定验证方公钥，仅在 ecsdsa 或 sm2 时有效
        format: "der", 指定签名格式，可选为 der 和 raw，缺省为 der
        recoverable: false 指定返回可恢复签名，仅在 secp256k1 有效
     }
     ```

     @param data 指定要签名的数据
     @param opts 指定签名选项
     @return 返回签名后的数据
     */
    Buffer sign(Buffer data, Object opts = {}) async;

    /*! @brief 使用当前算法密码公钥验证数据
     opts 支持以下参数:
     ```JavaScript
     {
        alg: 0， 指定签名的 hash 算法，仅在 RSA 时有效，缺省为 0. 支持算法: 0=NONE,1=MD5,2=SHA1,3=SHA224,4=SHA256,5=SHA384,6=SHA512,7=RIPEMD160
        to: pk, 指定验证方公钥，仅在 ecsdsa 或 sm2 时有效
        format: "der", 指定签名格式，可选为 der 和 raw，缺省为 der
     }
     ```

     @param data 指定要验证的数据
     @param sign 指定要验证的签名
     @param opts 指定验证选项
     @return 返回验证后的结果
     */
    Boolean verify(Buffer data, Buffer sign, Object opts = {}) async;
};
