
/*! @brief Message queue module */
module mq
{
    /*! @brief Create a message obeject, see Message */
    static Message;

    /*! @brief Create a HTTP handler, see HttpHandler */
    static HttpHandler;

    /*! @brief Create a message chain handler, see Chain */
    static Chain;

    /*! @brief Create a message routing handler, see Routing*/
    static Routing;

    /*! @brief Create a javascript message handler, return immediately when pass by value
     @param hdlr builtin handler, function or javascript mapping object, handler will map be mapped automatically
     @return Return handler of handle function

     Syntax:
     @code
     function func(v){
     }
     @endcode
     Parameter v is the message to procee, there are three possibilities:
     - Object javascript object, used for mapping message
     - Function javascript function, used for next stage
     - Handler Builtin handler for next stage
     No return or other result will finish message processing.

     Use message mapping handler to handle nested logic as follows:
     @code
     hdlr = mq.jsHandler({
         // fun1
        fun1 : function(v){},
        sub : {
            // sub.fun2 or sub/fun2
            fun2 : function(v){},
            // sub.hdlr or sub/hdlr
            hdlr: myHandler
        }
     });
     @endcode
     In the example, fun1 and fun2 are normal javascript handle function, sub is a sub-object, myHandler is a handler
     */
    static Handler jsHandler(Value hdlr);

    /*! @brief Create async handler
      @return Return created handler

     Wait handler async as follows:
     @code
     function func(v){
         var await = mq.await();

         call_some_async_func(v1, v2, v3, function() {
                 await.end();
             });

         return await;
     }
     @endcode
     Example uses javascript message handle function, when it returns, message handle engine will wait for await until await.end being called.
     */
    static AsyncWait await();

    /*! @brief Create a empty handler
     @return Return empry handler
     */
    static Handler nullHandler();

    /*! @brief Invoke a message or object to given handler
     @param hdlr Handler to operate
     @param v Message or object

     Unlike invoke method of handler, this will loop and wait every handler until reach null
     */
    static invoke(Handler hdlr, object v) async;
};
