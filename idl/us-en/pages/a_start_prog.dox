/*! @page start_prog Beginning
@tableofcontents
@section program_sec Beginning

@subsection prg_step1 Step 1: Hello, World!

Choose your prefered editor and create hello.js under bin:
@code
console.log('Hello, World!');
@endcode

And then run:
@code
Release/fibjs hello
@endcode

Output as follows:
@code
Hello, World!
@endcode

Yes, it’s so easy like ‘Hello, Wolrd!’ example of others languages.

@subsection prg_step2 Step 2: DANG, DANG, DANG...

And then, let’s make a simple program simulating a bell, whick makes a jow ‘DANG’ every second. Of course you can set a longer interval.
@code
var coroutine = require("coroutine");

while(true){
  console.log('DANG...');
  coroutine.sleep(1000);
}
@endcode

When running, it will output a ‘DANG’ every second on the screen: 
@code
DANG...
DANG...
DANG...
......
@endcode

It is to be noted that you have to run ctrl+c to terminate. If not, it will run forever.

@subsection prg_step3 Step 3: DANGs

As the example above, there is only a bell at a time, whick is not what we expected. What we expect is that, more than a bell exist and make jows at the same time.

@code
var coroutine = require("coroutine");

function dang(n){
  while(true){
    console.log('DANG %d...', n);
    coroutine.sleep(1000);
  }
}

for(var i = 0; i < 5; i ++)
  coroutine.start(dang,i);

while(true)
  coroutine.sleep(1000);
@endcode

Now there is 5 bells; everyone make a ‘DANG’ per second concurrently.
@code
DANG 0...
DANG 1...
DANG 2...
DANG 3...
DANG 4...
...
DANG 0...
DANG 1...
DANG 2...
DANG 3...
DANG 4...
...
@endcode

Also, we could make a small change to make the ‘DANG’s seem more natrual. Don’t jow at the same time.
@code
var coroutine = require("coroutine");

function dang(n){
  while(true){
    console.log('DANG %d...', n);
    coroutine.sleep(1000);
  }
}

for(var i = 0; i < 5; i ++){
  coroutine.start(dang,i);
  coroutine.sleep(200);
}

while(true)
  coroutine.sleep(1000);
@endcode

@subsection prg_step4 Advance: Parallel Jobs
With the help of coroutine, we can accomplish many funny things. Of course, we could deal with the same things by more funny ways. In many cases, there are some seperate database operations at a request. By means of coroutine, we could dispatch these operations into seperate coroutine tasks and make them handled parellelly. Obviously, it will be faster to response.
@code
var coroutine = require("coroutine");

function func(){
  coroutine.parallel(function(){
    ...
  }, function(){
    ...
  }, function(){
    ...
  }, function(){
    ...
  });
}
@endcode

Anonymous functions in the above section will be executed concurrently. After all functions finish, it goes on.
@subsection prg_step5 More Advance: Asynchronous Jobs

Also, for a request, some operations don’t need response immediately; only ones that user are sensitive about will be got a reponse before timeout of the request. To make the response faster, we could process these requests asynchronusly, which users will not be sensitive about instantly.
@code
var coroutine = require("coroutine");

function func(){
  ...

  coroutine.start(function(){
    ...
  });

  ...
}
@endcode

The anonymous function above will be delayed to execute.

@subsection prg_step10 Summary

Let’s start fibjs! With coroutine, it’s more garaceful and delightful to write concurrent code than callbacks. 

*/