/*! @page server Server Programming
@tableofcontents
@section web_file Static File Server

It is very easy to create a simple Web server with fibjs:
@code
var http = require('http');

var svr = new http.Server(80, http.fileHandler('../fibjs/docs'));
svr.run();
@endcode

As a regular static file server, it’s grossly powerful. Meanwhile, the above server supports compression (automatically), precompression, update checking,etc.

But fibjs is not just for static files; the same jobs will also be competed by both Apache and Nginx perfessionally. Fibjs’ static Web server could serve as a downloading server auxiliarily for small-scale frontend files.

@section web_script Dynamic Server

As a dynamic server, its implementation will not be more comprehensible than the static one:
@code
var http = require('http');

var svr = new http.Server(80, function(r){
  r.response.write('Hello, World!');
});
svr.run();
@endcode

This example just a demo of simple text, “Hello, World!” for example. Of course, it needs to implement further for building a more comprehensible dynamic server.

@section web_both Both Static and Dynamic Supoort
When the website is small-scale, we commonly just need a server, supporting both static file and dynamic request.
@code
var http = require('http');
var mq = require('mq');

var svr = new http.Server(8080, new mq.Routing({
	'^/www(/.*)': http.fileHandler('../fibjs
/docs'),
	'^/rpc(/.*)': function(r) {
		r.response.write('Hello, World!');
	}
}));
svr.run();
@endcode

*/