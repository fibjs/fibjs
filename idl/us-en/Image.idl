
/*! @brief Image object with transform, draw and save operations, etc. 

 Image object belongs to gd module, to create:
 @code
 var img = gd.create(640, 480);
 var img1 = gd.load(data);
 @endcode
 */
interface Image : object
{
    /*! @brief Return image width */
    readonly Integer width;

    /*! @brief Return image height */
    readonly Integer height;

    /*! @brief Return image format, result will be gd.PNG, gd.JPEG, gd.GIF, gd.BMP, gd.GD, or gd.GD2 */
    readonly Integer format;

    /*! @brief Return image type, result will be gd.TRUECOLOR or gd.PALETTE */
    readonly Integer type;

    /*! @brief Return total number of colors in color table of image */
    readonly Integer colorsTotal;

    /*! @brief Get and set a color to be transparent */
    Integer transparent;

    /*! @brief Get and set whether the image is progressive, only supports jpeg format */
    Boolean progressive;

    /*! @brief Get and set whether to calculate alpha layer for drawing, default is true */
    Boolean alphaBlending;

    /*! @brief Return image data in given format
     @param format Indicate return data format, can be gd.PNG, gd.JPEG, gd.GIF, gd.BMP, gd.GD, or gd.GD2, default is gd.PNG
     @param quality Compress level when format is gd.JPEG, default is 85, and other formats ignore this
     @return Return formatted data
     */
    Buffer getData(Integer format = gd.PNG, Integer quality = 85) async;

    /*! @brief Write image data to write stream in given format
     @param stm Stream object to write
     @param format Indicate return data format, can be gd.PNG, gd.JPEG, gd.GIF, gd.BMP, gd.GD, or gd.GD2, default is gd.PNG
     @param quality Compress level when format is gd.JPEG, default is 85, and other formats ignore this
     */
    save(Stream stm, Integer format = gd.PNG, Integer quality = 85) async;

    /*! @brief Write/overwrite image data to a file in given format 
     @param fname File name
     @param format Indicate return data format, can be gd.PNG, gd.JPEG, gd.GIF, gd.BMP, gd.GD, or gd.GD2, default is gd.PNG
     @param quality Compress level when format is gd.JPEG, default is 85, and other formats ignore this
     */
    save(String fname, Integer format = gd.PNG, Integer quality = 85) async;

    /*! @brief Allocate a color number for given color, palette index for gd.PALETTE and rgb for gd.TRUECOLOR
     @param red Red, range is 0-255
     @param green Green, range is 0-255
     @param blue Blue, range is 0-255
     @return Return color number, -1 otherwise
     */
    Integer colorAllocate(Integer red, Integer green, Integer blue);

    /*! @brief Allocate a color number for given color, palette index for gd.PALETTE and rgb for gd.TRUECOLOR
     @param color Combined colors, can be generated by gd.color, gb.rgb, gd.rgba
     @return Return color number, -1 otherwise
     */
    Integer colorAllocate(Integer color);

    /*! @brief Allocate a color number for given color and transparency, palette index for gd.PALETTE and rgba for gd.TRUECOLOR
     @param red Red, range is 0-255
     @param green Green, range is 0-255
     @param blue Blue, range is 0-255
     @param alpha Alpha, range is 0-1.0
     @return Return color number, -1 otherwise
     */
    Integer colorAllocateAlpha(Integer red, Integer green, Integer blue, Number alpha);

    /*! @brief Allocate a color number for given color and transparency, palette index for gd.PALETTE and rgba for gd.TRUECOLOR
     @param color Combined colors, can be generated by gd.color, gb.rgb, gd.rgba
     @return Return color number, -1 otherwise
     */
    Integer colorAllocateAlpha(Integer color);

    /*! @brief Allocate a closest color number for given color, palette index for gd.PALETTE and rgb for gd.TRUECOLOR
     @param red Red, range is 0-255
     @param green Green, range is 0-255
     @param blue Blue, range is 0-255
     @return Return color number, -1 otherwise
     */
    Integer colorClosest(Integer red, Integer green, Integer blue);

    /*! @brief Allocate a closest color number for given color, palette index for gd.PALETTE and rgb for gd.TRUECOLOR
     @param color Combined colors, can be generated by gd.color, gb.rgb, gd.rgba
     @return Return color number, -1 otherwise
     */
    Integer colorClosest(Integer color);

    /*! @brief Allocate a closest color number for given color using Hue/White/Black, palette index for gd.PALETTE and rgb for gd.TRUECOLOR
     @param red Red, range is 0-255
     @param green Green, range is 0-255
     @param blue Blue, range is 0-255
     @return Return color number, -1 otherwise
     */
    Integer colorClosestHWB(Integer red, Integer green, Integer blue);

    /*! @brief Allocate a closest color number for given color using Hue/White/Black, palette index for gd.PALETTE and rgb for gd.TRUECOLOR
     @param color Combined colors, can be generated by gd.color, gb.rgb, gd.rgba
     @return Return color number, -1 otherwise
     */
    Integer colorClosestHWB(Integer color);

    /*! @brief Allocate a closest color number for given color and transparency, palette index for gd.PALETTE and rgba for gd.TRUECOLOR
     @param red Red, range is 0-255
     @param green Green, range is 0-255
     @param blue Blue, range is 0-255
     @param alpha Alpha, range is 0-1.0
     @return Return color number, -1 otherwise
     */
    Integer colorClosestAlpha(Integer red, Integer green, Integer blue, Number alpha);

    /*! @brief Allocate a closest color number for given color and transparency, palette index for gd.PALETTE and rgba for gd.TRUECOLOR
     @param color Combined colors, can be generated by gd.color, gb.rgb, gd.rgba
     @return Return color number, -1 otherwise
     */
    Integer colorClosestAlpha(Integer color);

    /*! @brief Find color number of given color, palette index for gd.PALETTE and rgb for gd.TRUECOLOR
     @param red Red, range is 0-255
     @param green Green, range is 0-255
     @param blue Blue, range is 0-255
     @return Return color number, -1 otherwise
     */
    Integer colorExact(Integer red, Integer green, Integer blue);

    /*! @brief Find color number of given color, palette index for gd.PALETTE and rgb for gd.TRUECOLOR
     @param color Combined colors, can be generated by gd.color, gb.rgb, gd.rgba
     @return Return color number, -1 otherwise
     */
    Integer colorExact(Integer color);

    /*! @brief Find color number of given color and transparency, palette index for gd.PALETTE and rgba for gd.TRUECOLOR
     @param red Red, range is 0-255
     @param green Green, range is 0-255
     @param blue Blue, range is 0-255
     @param alpha Alpha, range is 0-1.0
     @return Return color number, -1 otherwise
     */
    Integer colorExactAlpha(Integer red, Integer green, Integer blue, Number alpha);

    /*! @brief Find color number of given color and transparency, palette index for gd.PALETTE and rgba for gd.TRUECOLOR
     @param color Combined colors, can be generated by gd.color, gb.rgb, gd.rgba
     @return Return color number, -1 otherwise
     */
    Integer colorExactAlpha(Integer color);

    /*! @brief Find color number of given color, and allocate new one if not exists, palette index for gd.PALETTE and rgb for gd.TRUECOLOR
     @param red Red, range is 0-255
     @param green Green, range is 0-255
     @param blue Blue, range is 0-255
     @return Return color number, -1 otherwise
     */
    Integer colorResolve(Integer red, Integer green, Integer blue);

    /*! @brief Find color number of given color, and allocate new one if not exists, palette index for gd.PALETTE and rgb for gd.TRUECOLOR
     @param color Combined colors, can be generated by gd.color, gb.rgb, gd.rgba
     @return Return color number, -1 otherwise
     */
    Integer colorResolve(Integer color);

    /*! @brief Find color number of given color and transparency, and allocate new one if not exists, palette index for gd.PALETTE and rgba for gd.TRUECOLOR
     @param red Red, range is 0-255
     @param green Green, range is 0-255
     @param blue Blue, range is 0-255
     @param alpha Alpha, range is 0-1.0
     @return Return color number, -1 otherwise
     */
    Integer colorResolveAlpha(Integer red, Integer green, Integer blue, Number alpha);

    /*! @brief Find color number of given color and transparency, and allocate new one if not exists, palette index for gd.PALETTE and rgba for gd.TRUECOLOR
     @param color Combined colors, can be generated by gd.color, gb.rgb, gd.rgba
     @return Return color number, -1 otherwise
     */
    Integer colorResolveAlpha(Integer color);

    /*! @brief Release given color number, and will be reused in future allocation
     @param color Color number to release
     */
    colorDeallocate(Integer color);

    /*! @brief Set cut windows and make all changes inside this window
     @param x1 Top-left x coordinate
     @param y1 Top-left y coordinate
     @param x2 Bottom-right x coordinate
     @param y2 Bottom-right y coordinate
     */
    clip(Integer x1, Integer y1, Integer x2, Integer y2);

    /*! @brief Get pixel of given point
     @param x Indicates x coordinate
     @param y Indicates y coordinate
     @return Return color number of given point
     */
    Integer getPixel(Integer x, Integer y);

    /*! @brief Get true color pixel of given point
     @param x Indicates x coordinate
     @param y Indicates y coordinate
     @return Return color number of given point
     */
    Integer getTrueColorPixel(Integer x, Integer y);

    /*! @brief Draw a pixel in given point
     @param x Indicates x coordinate
     @param y Indicates y coordinate
     @param color Indicates color number
     */
    setPixel(Integer x, Integer y, Integer color);

    /*! @brief Set thickness of lines, line, rectangle, arc defaults are 1 pixel
     @param thickness Thickness of lines
     */
    setThickness(Integer thickness);

    /*! @brief Draw a line in given position
     @param x1 Start x coordinate
     @param y1 Start y coordinate
     @param x2 End x coordinate
     @param y2 End y coordinate
     @param color Color number of line
     */
    line(Integer x1, Integer y1, Integer x2, Integer y2, Integer color);

    /*! @brief Draw a rectangle in given position
     @param x1 Top-left x coordinate
     @param y1 Top-left y coordinate
     @param x2 Bottom-right x coordinate
     @param y2 Bottom-right y coordinate
     @param color Color number of rectangle
     */
    rectangle(Integer x1, Integer y1, Integer x2, Integer y2, Integer color);

    /*! @brief Draw a filled rectangle in given position
     @param x1 Top-left x coordinate
     @param y1 Top-left y coordinate
     @param x2 Bottom-right x coordinate
     @param y2 Bottom-right y coordinate
     @param color Color number of rectangle
     */
    filledRectangle(Integer x1, Integer y1, Integer x2, Integer y2, Integer color);

    /*! @brief Draw a polygon in given position
     @param points Array of coordinates, e.g. [[1, 1], [1, 10], [10, 15], [10, 20]]
     @param color Color number of polygon
     */
    polygon(Array points, Integer color);

    /*! @brief Draw a open polygon in given position
     @param points Array of coordinates, e.g. [[1, 1], [1, 10], [10, 15], [10, 20]]
     @param color Color number of polygon
     */
    openPolygon(Array points, Integer color);

    /*! @brief Draw a filled polygon in given position
     @param points Array of coordinates, e.g. [[1, 1], [1, 10], [10, 15], [10, 20]]
     @param color Color number of polygon
     */
    filledPolygon(Array points, Integer color);

    /*! @brief Draw a ellipse in given position
     @param x Center x coordinate
     @param y Center y coordinate
     @param width Width of ellipse
     @param height Height of ellipse
     @param color Color number of polygon
     */
    ellipse(Integer x, Integer y, Integer width, Integer height, Integer color);

    /*! @brief Draw a filled ellipse in given position
     @param x Center x coordinate
     @param y Center y coordinate
     @param width Width of ellipse
     @param height Height of ellipse
     @param color Color number of polygon
     */
    filledEllipse(Integer x, Integer y, Integer width, Integer height, Integer color);

    /*! @brief Draw a arc in given position
     @param x Center x coordinate
     @param y Center y coordinate
     @param width Width of ellipse where arc is in
     @param height Height of ellipse where arc is in
     @param start Start angle, range is 0-360
     @param end End angle, range is 0-360
     @param color Color number of arc
     */
    arc(Integer x, Integer y, Integer width, Integer height, Integer start, Integer end, Integer color);

    /*! @brief Draw a filled arc in given position
     @param x Center x coordinate
     @param y Center y coordinate
     @param width Width of ellipse where arc is in
     @param height Height of ellipse where arc is in
     @param start Start angle, range is 0-360
     @param end End angle, range is 0-360
     @param color Color number of arc
     @param style Style, can be gd.ARC, gd.CHORD, gd.NOFILL, gd.EDGED and their combination
     */
    filledArc(Integer x, Integer y, Integer width, Integer height, Integer start, Integer end, Integer color, Integer style = gd.ARC);

    /*! @brief Fill a closed area start at give point
     @param x Start x coordinate
     @param y Start y coordinate
     @param color Color number to fill
     */
    fill(Integer x, Integer y, Integer color);

    /*! @brief Fill a closed area start at give point within its border
     @param x Start x coordinate
     @param y Start y coordinate
     @param borderColor Color number of border
     @param color Color number to fill
     */
    fillToBorder(Integer x, Integer y, Integer borderColor, Integer color);

    /*! @brief Replace a color to another
     @param src Indicates original color
     @param dst Indicates new color
     */
    colorReplace(Integer src, Integer dst) async;

    /*! @brief Clone image
     @return Return cloned image
     */
    Image clone() async;

    /*! @brief Resample image to new size
     @param width Indicates new width
     @param height Indicates new height
     @return Return new image
     */
    Image resample(Integer width, Integer height) async;

    /*! @brief Crop image
     @param x Top-left x coordinate
     @param y Top-left y coordinate
     @param width Cut window width
     @param height Cut window height
     @return Return cutted image
     */
    Image crop(Integer x, Integer y, Integer width, Integer height) async;

    /*! @brief Flip image
     @param dir Flip direction, can be gd.BOTH,gd.HORIZONTAL, gd.VERTICAL, defaukt is gd.HORIZONTAL
     */
    flip(Integer dir = gd.HORIZONTAL) async;

    /*! @brief Rotate image
     @param dir Rotate direction, can be gd.LEFT, gd.RIGHT
     */
    rotate(Integer dir) async;

    /*! @brief Convert image type
     @param color Indicates type, can be gd.TRUECOLOR or gd.PALETTE
     */
    convert(Integer color = gd.TRUECOLOR) async;

    /*! @brief Copy image into another image
     @param source original image
     @param dstX Indicates new x coordinate
     @param dstY Indicates new y coordinate
     @param srcX Indicates original top-left x coordinate
     @param srcY Indicates original top-left y coordinate
     @param width Indicates width
     @param height Indicate height
     */
    copy(Image source, Integer dstX, Integer dstY, Integer srcX, Integer srcY, Integer width, Integer height) async;

    /*! @brief Merge image to another image
     @param source original image
     @param dstX Indicates new x coordinate
     @param dstY Indicates new y coordinate
     @param srcX Indicates original top-left x coordinate
     @param srcY Indicates original top-left y coordinate
     @param width Indicates width
     @param height Indicate height
     @param percent Indicates transparency
     */
    copyMerge(Image source, Integer dstX, Integer dstY, Integer srcX, Integer srcY, Integer width, Integer height, Integer percent) async;

    /*! @brief Merge image to another image with given gray
     @param source original image
     @param dstX Indicates new x coordinate
     @param dstY Indicates new y coordinate
     @param srcX Indicates original top-left x coordinate
     @param srcY Indicates original top-left y coordinate
     @param width Indicates width
     @param height Indicate height
     @param percent Indicate transparency
     */
    copyMergeGray(Image source, Integer dstX, Integer dstY, Integer srcX, Integer srcY, Integer width, Integer height, Integer percent) async;

    /*! @brief Copy and resize image
     @param source original image
     @param dstX Indicates new x coordinate
     @param dstY Indicates new y coordinate
     @param srcX Indicates original top-left x coordinate
     @param srcY Indicates original top-left y coordinate
     @param dstW Indicates resize width
     @param dstH Indicates resize height
     @param srcW Indicates original width
     @param srcH Indicates original height
     */
    copyResized(Image source, Integer dstX, Integer dstY, Integer srcX, Integer srcY, Integer dstW, Integer dstH, Integer srcW, Integer srcH) async;

    /*! @brief Copy and resample image
     @param source original image
     @param dstX Indicates new x coordinate
     @param dstY Indicates new y coordinate
     @param srcX Indicates original top-left x coordinate
     @param srcY Indicates original top-left y coordinate
     @param dstW Indicates resize width
     @param dstH Indicates resize height
     @param srcW Indicates original width
     @param srcH Indicates original height
     */
    copyResampled(Image source, Integer dstX, Integer dstY, Integer srcX, Integer srcY, Integer dstW, Integer dstH, Integer srcW, Integer srcH) async;

    /*! @brief Copy and rotate image
     @param source original image
     @param dstX Indicates new x coordinate
     @param dstY Indicates new y coordinate
     @param srcX Indicates original top-left x coordinate
     @param srcY Indicates original top-left y coordinate
     @param width Indicates width
     @param height Indicate height
     @param angle Indicate the angle of rotation
     */
    copyRotated(Image source, Number dstX, Number dstY, Integer srcX, Integer srcY, Integer width, Integer height, Integer angle) async;

    /*! @brief Applies a filter to an image, incoming parameters according to the type of filter.
     @param filterType
     - MEAN_REMOVAL,    Uses mean removal to achieve a "sketchy" effect.
     - EDGEDETECT,      Uses edge detection to highlight the edges in the image.
     - EMBOSS,          Embosses the image.
     - SELECTIVE_BLUR,  Blurs the image.
     - GAUSSIAN_BLUR,   Blurs the image using the Gaussian method.
     - NEGATE,          Reverses all colors of the image.
     - GRAYSCALE,       Converts the image into grayscale.
     - SMOOTH,          Makes the image smoother. Use arg1 to set the level of smoothness.
     - BRIGHTNESS,      Changes the brightness of the image. Use arg1 to set the level of brightness. The range for the brightness is -255 to 255.
     - CONTRAST,        Changes the contrast of the image. Use arg1 to set the level of contrast, The range for the contrast is 0~100.
     - COLORIZE,        Changes the hue of the image, Use arg1, arg2 and arg3 in the form of red, green, blue and arg4 for the alpha channel.The range for each color is 0 to 255.
     @param arg1 Filter parameters: The smoothness level of SMOOTH, The brightness level of BRIGHTNESS, The contrast level of CONTRAST,  The red value of COLORIZE.
     @param arg2 Filter parameters: The green value of COLORIZE.
     @param arg3 Filter parameters: The blue value of COLORIZE.
     @param arg4 Filter parameters: The alpha value of COLORIZE.
     */
    filter(Integer filterType, Number arg1 = 0, Number arg2 = 0, Number arg3 = 0, Number arg4 = 0) async;

    /*! @brief Return an image containing the affine transformed src image
     @param affine Affine matrix which is composed of six double number.
     @code
        affine = [ a0, a1, b0, b1, a2, b2 ];
        x' = a0x + a1y + a2;
        y' = b0x + b1y + b2;
     @endcode
     @param x Optional x coordinate of the clip zone.
     @param y Optional y coordinate of the clip zone.
     @param width Optional width of the clip zone.
     @param height Optional height of the clip zone.
     @return Return the affine transformed src image.
     */
    Image affine(Array affine, Integer x = -1, Integer y = -1, Integer width = -1, Integer height = -1);
};
