/*! @brief timers module */
module timers
{
    /*! @brief cancels a timed, repeating action which was previously established by a call to setInterval()
        @param t The identifier of the repeated action you want to cancel. This ID was returned by the corresponding call to setInterval().
    */
    static clearInterval(Timer t);
    
    /*! @brief cancels a timeout previously established by calling setTimeout().
        @param t The identifier of the timeout you want to cancel. This ID was returned by the corresponding call to setTimeout().
    */
    static clearTimeout(Timer t);

    /*! @brief clears the action specified by setImmediate.
        @param t immediateID is a ID returned by setImmediate.
    */
    static clearImmediate(Timer t);

    /*! @brief repeatedly calls a function or executes a code snippet, with a fixed time delay between each call.
        @param callback A function to be executed every delay milliseconds. The function is not passed any parameters, and no return value is expected.
        @param timeout The time, in milliseconds (thousandths of a second), the timer should delay in between executions of the specified function or code.When greater than 2^31 , execute immediately
        @param args Optional arguments to pass when the callback is called.
        @return The returned timeoutID is a numeric, non-zero value which identifies the timer created by the call to setInterval(); this value can be passed to clearInterval() to cancel the timeout.
    */
    static Timer setInterval(Function callback, Number timeout, ...args);
    
    /*! @brief sets a timer which executes a function or specified piece of code once after the timer expires.
        @param callback A function to be executed after the timer expires.
        @param timeout The time, in milliseconds (thousandths of a second), the timer should wait before the specified function or code is executed.When greater than 2^31 , execute immediately
        @param args Optional arguments to pass when the callback is called.
        @return The returned timeoutID is a positive integer value which identifies the timer created by the call to setTimeout(); this value can be passed to clearTimeout() to cancel the timeout.
    */
    static Timer setTimeout(Function callback, Number timeout, ...args);

    /*! @brief run a callback function immediately after the browser has completed other operations such as events and display updates.
        @param callback the function you wish to call.
        @param args Optional arguments to pass when the callback is called.
        @return where immediateID is the ID of the immediate which can be used later with clearImmediate.
    */
    static Timer setImmediate(Function callback, ...args);
};
