
/*! @brief zlib compression and decompression module

 To use it:
 @code
 var zlib = require('zlib');
 @endcode
 */
module zlib
{
    /*! @brief deflate compression level, no compression */
    const Integer NO_COMPRESSION = 0;

    /*! @brief deflate compression level, fastest */
    const Integer BEST_SPEED = 1;

    /*! @brief deflate compression level, smallest */
    const Integer BEST_COMPRESSION = 9;

    /*! @brief deflate compression level, default */
    const Integer DEFAULT_COMPRESSION = -1;

    /*! @brief Use deflate to compress data (zlib format)
     @param data Raw data
     @param level Indicate compression level, default is DEFAULT_COMPRESSION
     @return Return compressed binary
     */
    static Buffer deflate(Buffer data, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief Use deflate to compress data to stream (zlib format)
     @param data Raw data
     @param stm Stream to write compressed data
     @param level Indicate compression level, default is DEFAULT_COMPRESSION
     */
    static deflateTo(Buffer data, Stream stm, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief Use deflate to compress a stream data to another (zlib format)
     @param src Original stream
     @param stm Target stream to write compressed data
     @param level Indicate compression level, default is DEFAULT_COMPRESSION
     */
    static deflateTo(Stream src, Stream stm, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief Use deflate to decompress data (zlib format)
     @param data Compressed data
     @return Return decompressed binary
     */
    static Buffer inflate(Buffer data) async;

    /*! @brief Use deflate to decompress data to stream (zlib format)
     @param data Compressed data
     @param stm Stream to write decompressed data
     */
    static inflateTo(Buffer data, Stream stm) async;

    /*! @brief Use deflate to decompress a stream data to another (zlib format)
     @param src Original stream
     @param stm Target stream to write decompressed data
     */
    static inflateTo(Stream src, Stream stm) async;

    /*! @brief Use gzip to compress data
     @param data Raw data
     @return Return compressed binary
     */
    static Buffer gzip(Buffer data) async;

    /*! @brief Use gzip to compress data to stream
     @param data Raw data
     @param stm Stream to write compressed data
     */
    static gzipTo(Buffer data, Stream stm) async;

    /*! @brief Use gzip to compress a stream data to another
     @param src Original stream
     @param stm Target stream to write compressed data
     */
    static gzipTo(Stream src, Stream stm) async;

    /*! @brief Use gzip to decompress data
     @param data Compressed data
     @return Return decompressed binary
     */
    static Buffer gunzip(Buffer data) async;

    /*! @brief Use gzip to decompress data to stream
     @param data Compressed data
     @param stm Stream to write decompressed data
     */
    static gunzipTo(Buffer data, Stream stm) async;

    /*! @brief Use gzip to decompress a stream data to another
     @param src Original stream
     @param stm Target stream to write decompressed data
     */
    static gunzipTo(Stream src, Stream stm) async;

    /*! @brief Use deflate to compress data (deflateRaw)
     @param data Raw data
     @param level Indicate compression level, default is DEFAULT_COMPRESSION
     @return Return compressed binary
     */
    static Buffer deflateRaw(Buffer data, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief Use deflate to compress data to stream (deflateRaw)
     @param data Raw data
     @param stm Stream to write compressed data
     @param level Indicate compression level, default is DEFAULT_COMPRESSION
     */
    static deflateRawTo(Buffer data, Stream stm, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief Use deflate to compress a stream data to another (deflateRaw)
     @param src Original stream
     @param stm Target stream to write compressed data
     @param level Indicate compression level, default is DEFAULT_COMPRESSION
     */
    static deflateRawTo(Stream src, Stream stm, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief Use deflate to decompress data (deflateRaw)
     @param data Compressed data
     @return Return decompressed binary
     */
    static Buffer inflateRaw(Buffer data) async;

    /*! @brief Use deflate to decompress data to stream (deflateRaw)
     @param data Compressed data
     @param stm Stream to write decompressed data
     */
    static inflateRawTo(Buffer data, Stream stm) async;

    /*! @brief Use deflate to decompress a stream data to another (deflateRaw)
     @param src Original stream
     @param stm Target stream to write decompressed data
     */
    static inflateRawTo(Stream src, Stream stm) async;
};
