
/*! @brief Variant Array object, return a list of Variant

Used for create and manage array, to create:
 @code
 var collection = require("collection");
 var a = new collection.List();
 @endcode
 */
interface List : object
{
    /*! @brief List constructor*/
    List();

    /*! @brief Able to use index to vist array*/
    Variant operator[];

    /*! @brief Freeze array contents and prohibit some modification operations */
    freeze();

    /*! @brief Get size of array */
    readonly Integer length;

    /*! @brief Resize array
     @param sz New size
     */
    resize(Integer sz);

    /*! @brief Append an element to end of array
      @param v Element
     */
    push(Variant v);

    /*! @brief Appned elements to end of array
      @param ... Elements
     */
    push(...);

    /*! @brief Get last element in array
      @return Return last element
     */
    Variant pop();

    /*! @brief Slice a array in given range, ignore invalid range
     @param start Start, default is 0
     @param end End, default is end of array
     @return Return new array
     */
    List slice(Integer start = 0, Integer end = -1);

    /*! @brief Concatenate arrays
     @param ... Original arrays
     @return Return concatenated array
     */
    List concat(...);

    /*! @brief Test array with fucntion
     @param func Test function
     @param thisp Test object, can omit
     @return Return true when all test passed
     */
    Boolean every(Function func, Object thisp = {});

    /*! @brief The some() method tests whether some element passes the test implemented by the provided function.
     @param func Function to test for each element.
     @param thisp Value to use as this when executing the test Function.Optional
     @return Return false when none test passed, otherwise return true
     */
    Boolean some(Function func, Object thisp = {});

    /*! @brief Filter elements to become a new array
     @param func Filter function
     @param thisp Test object, can omit
     @return Return new array
     */
    List filter(Function func, Object thisp = {});

    /*! @brief Iterate all elements
     @param func Handle function
     @param thisp Test object, can omit
     */
    forEach(Function func, Object thisp = {});

    /*! @brief Iterate all elements and return result
     @param func Handle function
     @param thisp Test object, can omit
     @return Result array
     */
    List map(Function func, Object thisp = {});

    /*! @brief Return as js array 
      @return The js array that contains data
     */
    Array toArray();
};
