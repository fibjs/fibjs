
/*! @brief Global object, which can be accessed by all scripts*/
module global
{
    /*! @brief Binary data cache object, which used for IO reading and writing, reference Buffer object.*/
    static Buffer;

    /*! @brief A 64-bit integer object，reference Int64 object.*/
    static Int64;

    /*! @brief Console Access Objects */
    static console;

    /*! @brief Process Objects*/
    static process;

    /*! @brief Worker Object，only available at Worker entry script*/
    static readonly Worker Master;

    /*! @brief global Object*/
    static readonly Object global;

    /*! @brief Run a script
     @param fname Specifies the running path for script
     @param argv Specify the run parameters, which can be caught in script by argv.
     */
    static run(String fname, Array argv = []);

    /*! @brief Get the current script's run parameters, start js for process start parameter, and run script to obtain parameters passed */
    static readonly Array argv;

    /*! @brief Load a module and return module object, reference @ref module

     require can be used to load the base module, such as file module.

     Base module is initializing when the sandbox created, only need pass the id when referencing, e.g: require("net")。

     File module is user-defined modules which required by the relative path beginning with './' or '../'. File module supports .js and .json file.

     File module also supports the format package.json, system will first require the main in package.json when the module is a directory, then will try to load index.js or index.json in the path if failed.

     If the path is not a reference beginning with ./ or ../, and the module is not non-base module, system will first require the match one in startup path, and then look for the .modules in current path, then try the parent directory.

     @param id Specifies the name of module to load
     @return Returns the derivation of the load module
     */
    static Value require(String id);

    /*! @brief Mandatory for garbage collection*/
    static GC();

    /*! @brief current script filename*/
    static readonly String __filename;

    /*! @brief current script directory*/
    static readonly String __dirname;

    /*! @brief cancels a timed, repeating action which was previously established by a call to setInterval()
        @param t The identifier of the repeated action you want to cancel. This ID was returned by the corresponding call to setInterval().
    */
    static clearInterval(Timer t);

    /*! @brief cancels a timeout previously established by calling setTimeout().
        @param t The identifier of the timeout you want to cancel. This ID was returned by the corresponding call to setTimeout().
    */
    static clearTimeout(Timer t);

    /*! @brief clears the action specified by setImmediate.
        @param t immediateID is a ID returned by setImmediate.
    */
    static clearImmediate(Timer t);

    /*! @brief repeatedly calls a function or executes a code snippet, with a fixed time delay between each call.
        @param callback A function to be executed every delay milliseconds. The function is not passed any parameters, and no return value is expected.
        @param timeout The time, in milliseconds (thousandths of a second), the timer should delay in between executions of the specified function or code.When greater than 2^31 , execute immediately
        @param args Optional arguments to pass when the callback is called.
        @return The returned timeoutID is a numeric, non-zero value which identifies the timer created by the call to setInterval(); this value can be passed to clearInterval() to cancel the timeout.
    */
    static Timer setInterval(Function callback, Number timeout, ...args);

    /*! @brief sets a timer which executes a function or specified piece of code once after the timer expires.
        @param callback A function to be executed after the timer expires.
        @param timeout The time, in milliseconds (thousandths of a second), the timer should wait before the specified function or code is executed.When greater than 2^31 , execute immediately
        @param args Optional arguments to pass when the callback is called.
        @return The returned timeoutID is a positive integer value which identifies the timer created by the call to setTimeout(); this value can be passed to clearTimeout() to cancel the timeout.
    */
    static Timer setTimeout(Function callback, Number timeout, ...args);

    /*! @brief run a callback function immediately after the browser has completed other operations such as events and display updates.
        @param callback the function you wish to call.
        @param args Optional arguments to pass when the callback is called.
        @return where immediateID is the ID of the immediate which can be used later with clearImmediate.
    */
    static Timer setImmediate(Function callback, ...args);

    /*! @brief Enter the interactive mode, you can interactively execute the internal commands and code which can only be referenced when js start.
     @param cmds Add commands in the following format:
     @code
        [
            {
                cmd: ".test",
                help: "this is a test",
                exec: function(argv) {
                    console.log(argv);
                }
            },
            {
                cmd: ".test1",
                help: "this is an other test",
                exec: function(argv) {
                    console.log(argv);
                }
            }
        ]
     @endcode
     */
    static repl(Array cmds = []);

    /*! @brief Enter the interactive mode, you can interactively execute the internal commands and code which can only be referenced when js start.

     At the same time allowed only a Stream repl, close the previous one when create a new Stream repl.
     @param out Input/output stream object, usually for a network connection
     @param cmds Add commands in the following format:
     @code
        [
            {
                cmd: ".test",
                help: "this is a test",
                exec: function(argv) {
                    console.log(argv);
                }
            },
            {
                cmd: ".test1",
                help: "this is an other test",
                exec: function(argv) {
                    console.log(argv);
                }
            }
        ]
     @endcode
     */
    static repl(Stream out, Array cmds = []);
};
