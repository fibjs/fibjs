/***************************************************************************
 *                                                                         *
 *   This file was automatically generated with idlc.js                    *
 *	 build info: 								   						   *
 *   	- fibjs	: <%- (buildInfo.fibjs + '').padEnd(45, ' ') %>            *
 *   	- date	: <%- (buildInfo.date + '').padEnd(44, ' ') %>             *
 *                                                                         *
 ***************************************************************************/

/** 
 * @author Richard <richardo2016@gmail.com>
 *
 */<%
	var isInterface = def.declare.type === 'interface'
	var isModule = def.declare.type === 'module' 
	var needRefObject = isInterface && def.declare.name !== 'object'
%>
<% if (needRefObject) {%>/// <reference path="object.d.ts" /><% }
%>

<% if (filename === 'index') { %>
<% for(var i=0; i<defModuleNames.length; i++) { 
	var defName = defModuleNames[i]
%>/// <reference path="<%- defName %>.d.ts" />
<% } /** else of iteration`defModuleNames` */ %>
import _Global from 'global';
import _Process from 'process';

type GlobalExportsType = any;
interface ModuleType {
	exports: GlobalExportsType;
}

declare global {
	var exports: GlobalExportsType;
	const module: ModuleType;
<% for(var i=0; i<defModules['global'].members.length; i++) {
	var member = defModules['global'].members[i]
	console.log('global member', member.memType, member.name, member.type)
	if (excludedTopLevelVariablesInGlobalModule.includes(member.name)) {%>
	/** const <%- member.name %>: <%- member.type || 'null' %>; */<%
	continue;
	}%>
	const <%- member.name %>: typeof _Global.<%- member.name %><%
} /** end of iteration`defModules['global'].members` */ %>
} /** end of `declare global` */

<% } else if (filename === '_test_env') { /** elseif of `if (filename === 'index')` */ %>
/// <reference path="test.d.ts" />
import test from 'test'

/// <reference path="assert.d.ts" />
import _assert from 'assert'

declare global {
<% for(var i=0; i<member_fns.length; i++) { 
	var fn_in_test_mod = member_fns[i]
	var fn_name = fn_in_test_mod.name
%>	const <%- fn_name %>: typeof test.<%- fn_name %>
<% } /** else of iteration`member_fns` */ %>
	const assert: typeof _assert
}
/** declare const describe: test.describe; */

<% } /** else of `if (filename === 'index')` */ else {%>
<% for(var i=0; i<refers.length; i++) { 
	var refClassName = refers[i]
	if(defObjects[refClassName]) {%>/// <reference path="<%- refClassName %>.d.ts" /><%
	} else if (false && defModules[refClassName]){%>import <%- refClassName %> from '<%- refClassName %>'<%}
%>

<% } /** end of `iteration about refers` */ %>
<% if (isModule) { // give all internal defined classes as reference
	for(var i=0; i<defObjectNames.length; i++) { 
	var defClassName = defObjectNames[i]
%>
/// <reference path="<%- defClassName %>.d.ts" />
<% } /** end of `iteration about defObjectNames` */ %>

<% } %>
/** module Or Internal Object */
/**
	* @brief <%- def.declare.doc.descript %>
	* @detail <%- def.declare.doc.detail %>
	*/<%
	if (isInterface) {
		var className = _fns.transObjectName(def.declare.name)
		var extendClassName = _fns.transObjectName(def.declare.extend)
		var renderClassParentRef = extendClassName && extendClassName !== '_object'
%>
<% if (renderClassParentRef) {%>/// <reference path="<%- extendClassName %>.d.ts" /><%}%>
declare class <%- _fns.uglifyInternalClassName(className) %> <%- extendClassName ? `extends ${_fns.uglifyInternalClassName(extendClassName)}` : '' %> {
	<% for(var i=0; i<member_props.length; i++) {
		var memberProp = member_props[i]
		var propName = memberProp.name 
		var propType = typeMap[memberProp.type]
		propType = _fns.uglifyTypeInDefObjects(propType)

		var str = JSON.stringify(memberProp)
	%>
	/**
	 * class prop <% str %>
	 *
	 * <% var comments = memberProp.comments.split('\n'); for(var idx=0; idx<comments.length; idx++) {var comment = comments[idx].trim().replace('! @', '@') %>
	 * <%- comment %><% } %>
	 * <%- memberProp.static ? '@static' : '' %>
	 * <%- memberProp.readonly ? '@readonly' : '' %>
	 * @type <%- memberProp.type %>
	 */
	
	<%- propName %>: <%- propType %>
	<% } /** end of iteration 'member_props' */ %>
	
	<% for(var i=0; i<member_fns.length; i++) {
		var fn = member_fns[i]
		var isConstructor = fn.name === def.declare.name
		var fn_name = isConstructor ? 'constructor' : fn.name
	%>
	/**
	 * <% var comments = fn.comments.split('\n'); for(var idx=0; idx<comments.length; idx++) {var comment = comments[idx].trim().replace('! @', '@') %>
	 * <%- comment %><% } %>
	 * <%- fn.deprecated ? '@deprecated' : '' %>
	 * <%- fn.async ? '@async' : '' %>
	 */<%
	  var paramList = _fns.params2paramList(fn.params, typeMap)

	  var returnType = fn.type ? _fns.uglifyTypeInDefObjects(typeMap[fn.type], defObjects) : 'void'
	  if (isConstructor)
		returnType = ''
	%>
	<%- fn.static ? 'static ' : '' %><%- fn_name %>(<%- paramList.join(', ') %>)<%- returnType ? `: ${returnType}` : '' %>;
<% } /** end of iteration 'member_fns' */ %>
} /** endof class */
<% } /** endof `if (isInterface)` */ 

if (isModule) { %>
declare module "<%- def.declare.name %>" {
	<% for(var i=0; i<refers.length; i++) { 
		var refClassName = refers[i]
		if(defModules[refClassName]) {%>
	import <%- _fns.getAliasNameForRefModule(refClassName) %> = require('<%- refClassName %>')<%}}%>

	module <%- def.declare.name %> {
		<% for(var i=0; i<member_constants.length; i++) {
				var constant = member_constants[i]

				var hasDefault = !!constant.default
		%>
		/**
		 * <% var comments = constant.comments.split('\n'); for(var idx=0; idx<comments.length; idx++) {var comment = comments[idx].trim().replace('! @', '@') %>
		 * <%- comment %><% } %>
		 * <%- constant.deprecated ? '@deprecated' : '' %>
		 * <%- constant.async ? '@async' : '' %>
		 */
		export const <%- constant.name %><%- hasDefault ? ` = ${constant.default.value}` : ''%>;
		<% } /** end of iteration 'member_constants' */ %>
		<% for(var i=0; i<member_props.length; i++) {
				var prop = member_props[i]

				var hasDefault = !!prop.default
				var propType = typeMap[prop.type] || 'any'

				var finalPropType = propType

				var isInternalClass = !!defObjects[propType]
				var isInternalModule = !!defModules[propType]
				if (isInternalClass) {
					finalPropType = _fns.uglifyTypeInDefObjects(propType)
				}
				if (isInternalModule) {
					finalPropType = _fns.getAliasNameForRefModule(propType)
				}
		%>
		/**
		 * <% var comments = prop.comments.split('\n'); for(var idx=0; idx<comments.length; idx++) {var comment = comments[idx].trim().replace('! @', '@') %>
		 * <%- comment %><% } %>
		 * <%- prop.deprecated ? '@deprecated' : '' %>
		 * <%- prop.async ? '@async' : '' %>
		 */
		export const <%- prop.name %>: <%- finalPropType %><%- hasDefault ? ` = ${prop.default.value}` : ''%>;
		<% } /** end of iteration 'member_props' */ %>
		<% for(var i=0; i<member_objects.length; i++) {
			var internalObj = member_objects[i]
			var objectName = internalObj.name
			var objectType = internalObj.type || internalObj.name
			// var str = JSON.stringify(internalObj)
			var isInternalClass = !!defObjects[objectType]
			var isInternalModule = !!defModules[objectType]
		%>
		/**
		 * <% var comments = internalObj.comments.split('\n'); for(var idx=0; idx<comments.length; idx++) {var comment = comments[idx].trim().replace('! @', '@') %>
		 * <%- comment %><% } %>
		 * <%- internalObj.deprecated ? '@deprecated' : '' %>
		 * <%- internalObj.async ? '@async' : '' %>
		 */
		<% if (isInternalClass) {%>export class <%- objectName %> extends <%- _fns.uglifyInternalClassName(objectType) %> {}<%}%>
		<% if (isInternalModule) {%>export const <%- objectName %>: typeof <%- _fns.getAliasNameForRefModule(objectType) %><%}%>
		<% } /** end of iteration 'member_objects' */ %>
		
		<% for(var i=0; i<member_fns.length; i++) {
				var fn = member_fns[i]
		%>
		/**
		 * <% var comments = fn.comments.split('\n'); for(var idx=0; idx<comments.length; idx++) {var comment = comments[idx].trim().replace('! @', '@') %>
		 * <%- comment %><% } %>
		 * <%- fn.deprecated ? '@deprecated' : '' %>
		 * <%- fn.async ? '@async' : '' %>
		 */<%
			var paramList = _fns.params2paramList(fn.params, typeMap)

			var returnType = fn.type ? _fns.uglifyTypeInDefObjects(typeMap[fn.type], defObjects) : 'void'
			%>
		export function <%- fn.name %>(<%- paramList.join(', ') %>): <%- returnType || 'void' %>;
	<% } /** end of iteration 'member_fns' */ %>
	} /** end of `module <%- def.declare.name %>` */
	export = <%- def.declare.name %>
}
<%} /** endof `if (isModule)` */ 
%>
/** endof `module Or Internal Object` */

<% } /** end of `if (filename === 'index')` */ %>
