
/*! @brief 二进制数据缓存对象，用于 io 读写的数据处理

 Buffer 对象为全局基础类，在任何时候都可以直接以 new Buffer(...) 创建：
 @code
 var buf = new Buffer();
 @endcode
 */
interface Buffer : object
{
    /*! @brief 缓存对象构造函数
     @param datas 初始化数据数组
     */
    Buffer(Array datas);

    /*! @brief 缓存对象构造函数
     @param str 初始化字符串，字符串将以 utf-8 格式写入，缺省则创建一个空对象
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     */
    Buffer(String str, String codec = "utf8");

    /*! @brief 缓存对象构造函数
     @param size 初始化缓冲区大小
     */
    Buffer(Integer size = 0);

    /*! @brief 缓存对象可使用下标直接访问二进制数据*/
    Integer operator[];

    /*! @brief 获取缓存对象的尺寸 */
    readonly Integer length;

    /*! @brief 修改缓存对象尺寸
     @param sz 指定新尺寸
     */
    resize(Integer sz);

    /*! @brief 向缓存对象写入一组数据
     @param datas 初始化数据数组
     */
    write(Array datas);

    /*! @brief 向缓存对象写入一组二进制数据
     @param data 初始化二进制数据
     */
    write(Buffer data);

    /*! @brief 向缓存对象写入字符串，字符串将以 utf-8 格式写入
     @param str 要写入的字符串
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     */
    write(String str, String codec = "utf8");

    /*! @brief 从源缓存对象区域拷贝数据到目标缓存对象区域
     @param targetBuffer 目标缓存对象
     @param targetStart 目标缓存对象开始拷贝字节位置，缺省为 0
     @param sourceStart 源缓存对象开始字节位置, 缺省为 0
     @param sourceEnd 源缓存对象结束字节位置, 缺省为 -1,表示源数据长度
     @return 拷贝的数据字节长度
     */
    Integer copy(Buffer targetBuffer, Integer targetStart = 0, Integer sourceStart = 0, Integer sourceEnd = -1);

    /*! @brief 从缓存对象读取一个 8 位无符号整型数值
     @param offset 指定读取的起始位置
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Integer readUInt8(Integer offset, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 16 位无符号整型数值，以低字节序的存储方式
     @param offset 指定读取的起始位置
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Integer readUInt16LE(Integer offset, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 16 位无符号整型数值，以高字节序的存储方式
     @param offset 指定读取的起始位置
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Integer readUInt16BE(Integer offset, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 32 位无符号整型数值，以低字节序的存储方式
     @param offset 指定读取的起始位置
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Long readUInt32LE(Integer offset, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 32 位无符号整型数值，以高字节序的存储方式
     @param offset 指定读取的起始位置
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Long readUInt32BE(Integer offset, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 8 位整型数值
     @param offset 指定读取的起始位置
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Integer readInt8(Integer offset, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 16 位整型数值，以低字节序的存储方式
     @param offset 指定读取的起始位置
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Integer readInt16LE(Integer offset, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 16 位整型数值，以高字节序的存储方式
     @param offset 指定读取的起始位置
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Integer readInt16BE(Integer offset, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 32 位整型数值，以低字节序的存储方式
     @param offset 指定读取的起始位置
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Integer readInt32LE(Integer offset, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 32 位整型数值，以高字节序的存储方式
     @param offset 指定读取的起始位置
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Integer readInt32BE(Integer offset, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 64 位整型数值，以低字节序的存储方式
     @param offset 指定读取的起始位置
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Int64 readInt64LE(Integer offset, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个 64 位整型数值，以高字节序的存储方式
     @param offset 指定读取的起始位置
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的整型数值
     */
    Int64 readInt64BE(Integer offset, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个浮点数，以低字节序的存储方式
     @param offset 指定读取的起始位置
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的浮点数
     */
    Number readFloatLE(Integer offset, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个浮点数，以高字节序的存储方式
     @param offset 指定读取的起始位置
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的浮点数
     */
    Number readFloatBE(Integer offset, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个双精度浮点数，以低字节序的存储方式
     @param offset 指定读取的起始位置
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的双精度浮点数
     */
    Number readDoubleLE(Integer offset, Boolean noAssert = false);

    /*! @brief 从缓存对象读取一个双精度浮点数，以高字节序的存储方式
     @param offset 指定读取的起始位置
     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出
     @return 返回读取的双精度浮点数
     */
    Number readDoubleBE(Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 8 位无符号整型数值
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     */
    writeUInt8(Integer value, Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 16 位无符号整型数值，以低字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     */
    writeUInt16LE(Integer value, Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 16 位无符号整型数值，以高字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     */
    writeUInt16BE(Integer value, Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 32 位无符号整型数值，以低字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     */
    writeUInt32LE(Long value, Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 32 位无符号整型数值，以高字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     */
    writeUInt32BE(Long value, Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 8 位整型数值
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     */
    writeInt8(Integer value, Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 16 位整型数值，以低字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     */
    writeInt16LE(Integer value, Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 16 位整型数值，以高字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     */
    writeInt16BE(Integer value, Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 32 位整型数值，以低字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     */
    writeInt32LE(Integer value, Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 32 位整型数值，以高字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     */
    writeInt32BE(Integer value, Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 64 位整型数值，以低字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     */
    writeInt64LE(Int64 value, Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个 64 位整型数值，以高字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     */
    writeInt64BE(Int64 value, Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个浮点数，以低字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     */
    writeFloatLE(Number value, Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个浮点数，以高字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     */
    writeFloatBE(Number value, Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个双精度浮点数，以低字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     */
    writeDoubleLE(Number value, Integer offset, Boolean noAssert = false);

    /*! @brief 向缓存对象写入一个双精度浮点数，以高字节序的存储方式
     @param value 指定写入的数值
     @param offset 指定写入的起始位置
     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出
     */
    writeDoubleBE(Number value, Integer offset, Boolean noAssert = false);

    /*! @brief 返回一个新缓存对象，包含指定范围的数据，若范围超出缓存，则只返回有效部分数据
     @param start 指定范围的起始，缺省从头开始
     @param end 指定范围的结束，缺省到缓存结尾
     @return 返回新的缓存对象
     */
    Buffer slice(Integer start = 0, Integer end = -1);

    /*! @brief 使用 16 进制编码缓存对象内容
     @return 返回编码字符串
     */
    String hex();

    /*! @brief 使用 base64 编码缓存对象内容
     @return 返回编码字符串
     */
    String base64();

    /*! @brief 返回二进制数据的编码字符串
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 返回对象的字符串表示
    */
    String toString(String codec);

    /*! @brief 返回二进制数据的 utf8 编码字符串
     @return 返回对象的字符串表示
    */
    String toString();
};

