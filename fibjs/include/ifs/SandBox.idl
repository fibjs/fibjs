/*! @brief 安全沙箱对象，用于管理一个独立的运行空间

  所有的代码都运行在自己的沙箱中，全局的 require 会调用当前沙箱加载模块，沙箱会通过 require 传递给加载的沙箱。下面的示例创建一个沙箱，限制只允许访问全局基础模块中的 assert 模块，并添加 a 和 b 两个定制模块：
 @code
 var vm = require('vm');
 var sbox = new vm.SandBox({
   a: 100,
   b: 200,
   assert: require('assert')
 });

 var mod_in_sbox = sbox.require('./path/to/mod');
 @endcode
 */
interface SandBox : object
{
    /*! @brief 构造一个新的安全沙箱对象，并初始化基础模块
     @param mods 指定要添加的模块对象字典
     */
    SandBox(Object mods);

    /*! @brief 构造一个新的安全沙箱对象，并初始化基础模块
     @param mods 指定要添加的模块对象字典
     @param require 自定义 require 函数，当模块不存在时，先调用自定义函数，无返回再从文件中加载
     */
    SandBox(Object mods, Function require);

    /*! @brief 向沙箱中添加一个基础模块
     @param id 指定要添加的模块名称
     @param mod 指定要添加的模块对象
     */
    add(String id, Value mod);

    /*! @brief 向沙箱中添加一组基础模块
     @param mods 指定要添加的模块对象字典，添加的 javascript 模块将会生成一份复制，以避免沙箱修改对象产生互相干扰
     */
    add(Object mods);

    /*! @brief 编译脚本为二进制代码
     @param srcname 指定要添加的脚本名称
     @param script 指定要编译的脚本代码
     @param mode 编译模式，0: module, 1: main, 2: script, 3: worker，缺省为 0
     @return 返回编译出的二进制代码
     */
    Buffer compile(String srcname, String script, Integer mode = 0);

    /*! @brief 编译脚本为二进制代码
     @param script 指定要编译的脚本代码
     @param mode 编译模式，0: module, 1: main, 2: script, 3: worker，缺省为 0
     @return 返回编译出的二进制代码
     */
    Buffer compile(String script, Integer mode = 0);

    /*! @brief 向沙箱中添加一个脚本模块
     @param srcname 指定要添加的脚本名称，srcname 必须包含扩展名，比如 json 或者 js, jsc
     @param script 指定要添加的二进制代码
     @return 返回加载的模块对象
     */
    Value addScript(String srcname, Buffer script);

    /*! @brief 从沙箱中删除指定的基础模块
     @param id 指定要删除的模块名称
     */
    remove(String id);

    /*! @brief 复制当前沙箱，新沙箱包含当前沙箱的模块，以及相同的名称和 require 函数
     @return 复制的新沙箱
     */
    SandBox clone();

    /*! @brief 运行一个脚本
     @param fname 指定要运行的脚本路径，此路径与当前运行脚本无关，永远从当前工作目录作为起始
     @param argv 指定要运行的参数，此参数可在脚本内使用 argv 获取
     */
    run(String fname, Array argv = []);

    /*! @brief 加载一个模块并返回模块对象，更多信息参阅 @ref module
     @param id 指定要加载的模块名称
     @param base 指定查找路径，不设定则从当前工作路径开始
     @return 返回加载的模块对象
     */
    Value require(String id, String base = "");
};
