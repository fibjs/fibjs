
/*! @brief Redis 数据库客户端对象

 用以创建和管理 Redis 数据库，创建方法：
 @code
 var db = require("db");
 var test = new db.openRedis("redis-server");
 @endcode
 */
class Redis : object
{
    /*! @brief redis 基础命令方法
     @param cmd 指定发送的命令
     @param ... 指定发送的参数
     @return 返回服务器返回的结果 */
    Value command(String cmd, ...);

    /*! @brief 将字符串值 value 关联到 key，如果 key 已经持有其他值， SET 就覆写旧值，无视类型
     @param key 指定要关联的 key
     @param value 指定要关联的数据
     @param ttl 以毫秒为单位为 key 设置生存时间；如果 ttl 为 0 ，那么不设置生存时间 */
    set(Buffer key, Buffer value, Long ttl = 0);

    /*! @brief 将 key 的值设为 value ，当且仅当 key 不存在。若给定的 key 已经存在，则 SETNX 不做任何动作。
     @param key 指定要关联的 key
     @param value 指定要关联的数据
     @param ttl 以毫秒为单位为 key 设置生存时间；如果 ttl 为 0 ，那么不设置生存时间 */
    setNX(Buffer key, Buffer value, Long ttl = 0);

    /*! @brief 将 key 的值设为 value，只在键已经存在时，才对键进行设置操作。
     @param key 指定要关联的 key
     @param value 指定要关联的数据
     @param ttl 以毫秒为单位为 key 设置生存时间；如果 ttl 为 0 ，那么不设置生存时间 */
    setXX(Buffer key, Buffer value, Long ttl = 0);

    /*! @brief 同时设置一个或多个 key-value 对。如果某个给定 key 已经存在，那么 MSET 会用新值覆盖原来的旧值
     @param kvs 指定要设置的 key/value 数组*/
    mset(Array kvs);

    /*! @brief 同时设置一个或多个 key-value 对。如果某个给定 key 已经存在，那么 MSET 会用新值覆盖原来的旧值
     @param ... 指定要设置的 key/value 列表*/
    mset(...);

    /*! @brief 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在
     @param kvs 指定要设置的 key/value 数组*/
    msetNX(Array kvs);

    /*! @brief 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在
     @param ... 指定要设置的 key/value 列表*/
    msetNX(...);

    /*! @brief 如果 key 已经存在并且是一个字符串，append 命令将 value 追加到 key 原来的值的末尾。如果 key 不存在，append 就简单地将给定 key 设为 value
     @param key 指定要追加的 key
     @param value 指定要追加的数据
     @return 追加 value 之后， key 中字符串的长度 */
    Integer append(Buffer key, Buffer value);

    /*! @brief 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始
     @param key 指定要修改的 key
     @param offset 指定修改的字节偏移
     @param value 指定要覆盖的数据
     @return 被修改之后，字符串的长度 */
    Integer setRange(Buffer key, Integer offset, Buffer value);

    /*! @brief 返回 key 中字符串值的子字符串，字符串的截取范围由 start 和 end 两个偏移量决定(包括 start 和 end 在内)
     @param key 指定要查询的 key
     @param start 指定查询的起始字节偏移
     @param end 指定查询的结束字节偏移
     @return 截取得出的子字符串 */
    Buffer getRange(Buffer key, Integer start, Integer end);

    /*! @brief 返回 key 所储存的字符串值的长度。当 key 储存的不是字符串值时，返回一个错误
     @param key 指定要计算的 key
     @return 字符串值的长度。当 key 不存在时，返回 0 */
    Integer strlen(Buffer key);

    /*! @brief 计算给定字符串中，被设置为 1 的比特位的数量
     @param key 指定要计算的 key
     @param start 指定要计算的起始字节，可以使用负数值，-1 表示最后一个字节，而 -2 表示倒数第二个字节，以此类推
     @param end 指定要计算的结束字节，可以使用负数值，-1 表示最后一个字节，而 -2 表示倒数第二个字节，以此类推
     @return 被设置为 1 的位的数量 */
    Integer bitcount(Buffer key, Integer start = 0, Integer end = -1);

    /*! @brief 返回 key 所关联的字符串值，如果 key 不存在那么返回特殊值 Null
     @param key 指定要关联的 key
     @return 当 key 不存在时，返回 Null ，否则，返回 key 的值 */
    Buffer get(Buffer key);

    /*! @brief 返回所有(一个或多个)给定 key 的值。如果给定的 key 里面，有某个 key 不存在，那么这个 key 返回特殊值 nil 。
     @param keys 指定要查询的 key 数组
     @return 一个包含所有给定 key 的值的列表 */
    List mget(Array keys);

    /*! @brief 返回所有(一个或多个)给定 key 的值。如果给定的 key 里面，有某个 key 不存在，那么这个 key 返回特殊值 nil 。
     @param ... 指定要查询的 key 列表
     @return 一个包含所有给定 key 的值的列表 */
    List mget(...);

    /*! @brief 将给定 key 的值设为 value ，并返回 key 的旧值(old value)
     @param key 指定要查询修改的 key
     @param value 指定修改的数值
     @return 返回给定 key 的旧值 */
    Buffer getset(Buffer key, Buffer value);

    /*! @brief 将 key 所储存的值减去减量
     @param key 指定要修改的 key
     @param num 指定要减去的数值
     @return 减去 num 之后，key 的值 */
    Long decr(Buffer key, Long num = 1);

    /*! @brief 将 key 所储存的值加上增量
     @param key 指定要修改的 key
     @param num 指定要加上的数值
     @return 加上 num 之后，key 的值 */
    Long incr(Buffer key, Long num = 1);

    /*! @brief 对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)
     @param key 指定要修改的 key
     @param offset 指定修改的位偏移
     @param value 指定设置或清除的参数，可以是 0 也可以是 1
     @return 指定偏移量原来储存的位 */
    Integer setBit(Buffer key, Integer offset, Integer value);

    /*! @brief 对 key 所储存的字符串值，获取指定偏移量上的位(bit)
     @param key 指定要查询的 key
     @param offset 指定查询的位偏移
     @return 字符串值指定偏移量上的位(bit) */
    Integer getBit(Buffer key, Integer offset);

    /*! @brief 检查给定 key 是否存在
     @param key 指定要关联的 key
     @return 若 key 存在，返回 True，否则返回 False */
    Boolean exists(Buffer key);

    /*! @brief 返回 key 所储存的值的类型
     @param key 指定要查询的 key
     @return 返回 key 所储存的值的类型，可能的值为 none(key不存在) string(字符串) list(列表) set(集合) zset(有序集) hash(哈希表) */
    String type(Buffer key);

    /*! @brief 查找所有符合给定模式 pattern 的 key
     @param pattern 指定查询模式
     @return 符合给定模式的 key 列表 */
    List keys(String pattern);

    /*! @brief 删除给定的一个或多个 key，不存在的 key 会被忽略
     @param keys 指定要删除的 key 数组
     @return 被删除 key 的数量 */
    Integer del(Array keys);

    /*! @brief 删除给定的一个或多个 key，不存在的 key 会被忽略
     @param ... 指定要删除的 key 列表
     @return 被删除 key 的数量 */
    Integer del(...);

    /*! @brief 为给定 key 设置生存时间，当 key 过期时，它会被自动删除
     @param key 指定要设定的 key
     @param ttl 以毫秒为单位为 key 设置生存时间
     @return 若 key 存在，返回 True，否则返回 False */
    Boolean expire(Buffer key, Long ttl);

    /*! @brief 返回给定 key 的剩余生存时间
     @param key 指定要查询的 key
     @return 以毫秒为单位，返回 key 的剩余生存时间，当 key 不存在时，返回 -2，当 key 存在但没有设置剩余生存时间时，返回 -1 */
    Long ttl(Buffer key);

    /*! @brief 移除给定 key 的生存时间，将这个 key 从『易失的』(带生存时间 key )转换成『持久的』(一个不带生存时间、永不过期的 key)
     @param key 指定要设定的 key
     @return 若 key 存在，返回 True，否则返回 False */
    Boolean persist(Buffer key);

    /*! @brief 将 key 改名为 newkey，当 key 和 newkey 相同，或者 key 不存在时，返回一个错误
     @param key 指定要改名的 key
     @param newkey 指定要改名的目的 key */
    rename(Buffer key, Buffer newkey);

    /*! @brief 当且仅当 newkey 不存在时，将 key 改名为 newkey，当 key 不存在时，返回一个错误
     @param key 指定要改名的 key
     @param newkey 指定要改名的目的 key
     @return 修改成功时，返回 True，如果 newkey 已经存在，返回 False */
    Boolean renameNX(Buffer key, Buffer newkey);

    /*! @brief 获取指定 key 的 Hash 对象，此对象为包含指定 key 的客户端，只有调用其方法才会操作数据库
     @param key 指定要获取的 key
     @return 返回包含指定 key 的 Hash 对象 */
    RedisHash getHash(String key);

    /*! @brief 获取指定 key 的 List 对象，此对象为包含指定 key 的客户端，只有调用其方法才会操作数据库
     @param key 指定要获取的 key
     @return 返回包含指定 key 的 List 对象 */
    RedisList getList(String key);

    /*! @brief 获取指定 key 的 Set 对象，此对象为包含指定 key 的客户端，只有调用其方法才会操作数据库
     @param key 指定要获取的 key
     @return 返回包含指定 key 的 Set 对象 */
    RedisSet getSet(String key);

    /*! @brief 获取指定 key 的 SortedSet 对象，此对象为包含指定 key 的客户端，只有调用其方法才会操作数据库
     @param key 指定要获取的 key
     @return 返回包含指定 key 的 SortedSet 对象 */
    RedisSortedSet getSortedSet(String key);

    /*! @brief 序列化给定 key ，并返回被序列化的值，使用 restore 命令可以将这个值反序列化为 Redis 键
     @param key 指定要序列化的 key
     @return 返回序列化之后的值，如果 key 不存在，那么返回 null */
    Buffer dump(Buffer key);

    /*! @brief 反序列化给定的序列化值，并将它和给定的 key 关联
     @param key 指定要反序列化的 key
     @param data 指定要反序列化的数据
     @param ttl 以毫秒为单位为 key 设置生存时间；如果 ttl 为 0 ，那么不设置生存时间*/
    restore(Buffer key, Buffer data, Long ttl = 0);

    /*! @brief 关闭当前数据库连接或事务 */
    close();
};
