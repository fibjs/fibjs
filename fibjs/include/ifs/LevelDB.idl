
/*! @brief LevelDB 数据库对象

 用以创建和管理字典对象，创建方法：
 @code
 var db = require("db");
 var test = new db.openLevelDB("test.db");
 @endcode
 */
class LevelDB : object
{
    /*! @brief 检查数据库内是否存在指定键值的数据
     @param key 指定要检查的键值
     @return 返回键值是否存在
     */
    Boolean has(Buffer key) async;

    /*! @brief 查询指定键值的值
     @param key 指定要查询的键值
     @return 返回键值所对应的值，若不存在，则返回 null
     */
    Buffer get(Buffer key) async;

    /*! @brief 设定一组键值数据，键值不存在则插入新数据
     @param map 指定要设定的键值数据字典
     */
    put(Object map);

    /*! @brief 设定一个键值数据，键值不存在则插入新数据
     @param key 指定要设定的键值
     @param value 指定要设定的数据
     */
    put(Buffer key, Buffer value) async;

    /*! @brief 删除一组指定键值的值
     @param keys 指定要设定的键值数组
     */
    remove(Array keys);

    /*! @brief 删除指定键值的全部值
     @param key 指定要删除的键值
     */
    remove(Buffer key) async;

    /*! @brief 枚举数据库中所有的键值对
     @param func 枚举回调函数

     回调函数有两个参数，key 和 value：

     @code
     var db = require("db");
     var test = new db.openLevelDB("test.db");

     test.forEach(function(key, value){
        ...
     });
     @endcode
     */
    forEach(Function func);

    /*! @brief 枚举数据库中键值在 from 和 to 之间的键值对
     @param from 枚举的最小键值，枚举时包含此键值，键值允许为字符串或者二进制 Buffer
     @param to 枚举的最大键值，枚举时不包含此键值，键值允许为字符串或者二进制 Buffer
     @param func 枚举回调函数

     回调函数有两个参数，key 和 value：

     @code
     var db = require("db");
     var test = new db.openLevelDB("test.db");

     test.between("aaa", "bbb", function(key, value){
        ...
     });
     @endcode
     */
    between(Value from, Value to, Function func);

    /*! @brief 在当前数据库上开启一个事务
     @return 返回一个开启的事务对象 */
    LevelDB begin();

    /*! @brief 提交当前事务 */
    commit();

    /*! @brief 关闭当前数据库连接或事务 */
    close() async;
};
