
/*! @brief 全局对象，所有脚本均可以访问的基础对象*/
module global
{
    /*! @brief 二进制数据缓存对象，用于 io 读写的数据处理，参见 Buffer 对象。*/
    static Buffer;

    /*! @brief 64位整数对象，参见 Int64 对象。*/
    static Int64;

    /*! @brief 控制台访问对象 */
    static console;

    /*! @brief 控制台访问对象 */
    static process;

    /*! @brief Worker 宿主对象，仅在 Worker 入口脚本有效 */
    static readonly Worker Master;

    /*! @brief 全局对象 */
    static readonly Object global;

    /*! @brief 运行一个脚本
     @param fname 指定要运行的脚本路径
     @param argv 指定要运行的参数，此参数可在脚本内使用 argv 获取
     */
    static run(String fname, Array argv = []);

    /*! @brief 获取当前脚本的运行参数，启动 js 获取进程启动参数，run 执行的脚本获取传递的参数 */
    static readonly Array argv;

    /*! @brief 当前脚本文件名 */
    static readonly String __filename;

    /*! @brief 当前脚本所在目录 */
    static readonly String __dirname;

    /*! @brief 清除指定的定时器
     @param t 指定要清除的定时器
    */
    static clearInterval(Timer t);

    /*! @brief 清除指定的定时器
     @param t 指定要清除的定时器
    */
    static clearTimeout(Timer t);

    /*! @brief 清除指定的定时器
     @param t 指定要清除的定时器
    */
    static clearImmediate(Timer t);

    /*! @brief 每间隔指定的时间后调用函数
     @param callback 指定回调函数
     @param timeout 指定间隔的时间，以毫秒为单位
     @return 返回定时器对象
    */
    static Timer setInterval(Function callback, Integer timeout);

    /*! @brief 在指定的时间后调用函数
     @param callback 指定回调函数
     @param timeout 指定延时的时间，以毫秒为单位
     @return 返回定时器对象
    */
    static Timer setTimeout(Function callback, Integer timeout);

    /*! @brief 下一个空闲时间立即执行回调函数
     @param callback 指定回调函数
     @return 返回定时器对象
    */
    static Timer setImmediate(Function callback);

    /*! @brief 加载一个模块并返回模块对象，更多信息参阅 @ref module

     require 可用于加载基础模块，文件模块。

     基础模块是沙箱创建时初始化的模块，引用时只需传递相应的 id，比如 require("net")。

     文件模块是用户自定义模块，引用时需传递以 ./ 或 ../ 开头的相对路径。文件模块支持 .js 和 .json 文件。

     文件模块也支持 package.json 格式，当模块为目录结构时，require 会先查询 package.json 中的 main，未发现则尝试加载路径下的 index.js 或 index.json。

     若引用路径不是 ./ 或 ../ 开头，并且非基础模块，require 则先在启动路径查找，然后从当前模块所在路径下的 .modules 查找，并上级目录递归。

     @param id 指定要加载的模块名称
     @return 返回加载模块的引出对象
     */
    static Value require(String id);

    /*! @brief 强制要求进行垃圾回收*/
    static GC();

    /*! @brief 进入交互模式，可以交互执行内部命令和代码，仅在启动 js 可以引用
     @param cmds 补充命令，格式如下：
     @code
        [
            {
                cmd: ".test",
                help: "this is a test",
                exec: function(argv) {
                    console.log(argv);
                }
            },
            {
                cmd: ".test1",
                help: "this is an other test",
                exec: function(argv) {
                    console.log(argv);
                }
            }
        ]
     @endcode
     */
    static repl(Array cmds = []);

    /*! @brief 进入交互模式，可以交互执行内部命令和代码，仅在启动 js 可以引用

    同一时刻只允许一个 Stream repl，新建一个 Stream repl 时，前一个 repl 将被关闭。
     @param out 输入输出流对象，通常为网络连接
     @param cmds 补充命令，格式如下：
     @code
        [
            {
                cmd: ".test",
                help: "this is a test",
                exec: function(argv) {
                    console.log(argv);
                }
            },
            {
                cmd: ".test1",
                help: "this is an other test",
                exec: function(argv) {
                    console.log(argv);
                }
            }
        ]
     @endcode
     */
    static repl(Stream out, Array cmds = []);
};
