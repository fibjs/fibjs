#!/bin/bash

usage()
{
	echo ""
	echo "Usage: `basename $0` [options] [-jn] [-v] [-h]"
	echo "Options:"
	echo "  release, debug: "
	echo "      Specifies the build type."
	echo "  i386, amd64, arm, arm64, mips, mips64, ppc, ppc64:"
	echo "      Specifies the architecture for code generation."
	echo "  clean: "
	echo "      Clean the build folder."
	echo "  ci: "
	echo "      Specifies the environment is CI."
	echo "  -h, --help:"
	echo "      Print this message and exit."
	echo ""
	exit 0
}

HOST_OS=`uname`
HOST_ARCH=`uname -m`

case ${HOST_ARCH} in
	i386|i686) HOST_ARCH="i386"
		;;
	x86_64|amd64) HOST_ARCH="amd64"
		;;
	armv6|armv7|armv7s|armv7l) HOST_ARCH="arm"
		;;
	aarch64) HOST_ARCH="arm64"
		;;
	mips|mipsel) HOST_ARCH="mips"
		;;
	mips64) HOST_ARCH="mips64"
		;;
	powerpc) HOST_ARCH="ppc"
		;;
	ppc64) HOST_ARCH="ppc64"
		;;
esac

TARGET_OS=$HOST_OS
TARGET_ARCH=$HOST_ARCH
BUILD_TYPE="release"
BUILD_PREFIX=""
BUILD_OPTION=""

for i in "$@"
do
	case $i in
		i386|amd64|arm|arm64|mips|mips64|ppc|ppc64) TARGET_ARCH=$i
			;;
		release|debug|clean) BUILD_TYPE=$i
			;;
			ci) CI="ci"
			;;
  --help|-h) usage
			;;
		  *) echo "illegal option $i"
			usage
			;;
	esac
done

if [ $TARGET_ARCH != $HOST_ARCH ] || [ $TARGET_OS != $HOST_OS ]; then
	case $TARGET_ARCH in
		i386)
			if [ $HOST_ARCH = "amd64" ]; then
				BUILD_OPTION="-m32"
			else
				usage
			fi
			;;
		amd64)
			if [ $TARGET_OS = "Linux" ]; then
				BUILD_PREFIX="x86_64-linux-gnu-"
			else
				usage
			fi
			;;
		arm)
			if [ $TARGET_OS = "Linux" ]; then
				BUILD_PREFIX="arm-linux-gnueabihf-"
				BUILD_OPTION="-march=armv7-a -mfpu=vfp3 -marm"
			else
				usage
			fi
			;;
		arm64)
			if [ $TARGET_OS = "Linux" ]; then
				BUILD_PREFIX="aarch64-linux-gnu-"
			else
				usage
			fi
			;;
		mips)
			if [ $TARGET_OS = "Linux" ]; then
				BUILD_PREFIX="mips-linux-gnu-"
			else
				usage
			fi
			;;
		mips64)
			if [ $TARGET_OS = "Linux" ]; then
				BUILD_PREFIX="mips64-linux-gnuabi64-"
			else
				usage
			fi
			;;
		ppc)
			if [ $TARGET_OS = "Linux" ]; then
				BUILD_PREFIX="powerpc-linux-gnu-"
			else
				usage
			fi
			;;
		ppc64)
			if [ $TARGET_OS = "Linux" ]; then
				BUILD_PREFIX="powerpc64-linux-gnu-"
			else
				usage
			fi
			;;
	esac
fi

if [ "$BUILD_PREFIX" != "" ]; then
	export CC=${BUILD_PREFIX}gcc
	export CXX=${BUILD_PREFIX}g++
fi

FIBJS_PATH=`pwd`
OUT_PATH=${FIBJS_PATH}/../../out
BIN_ROOT=${FIBJS_PATH}/../../bin
BIN_PATH=${FIBJS_PATH}/../../bin/${TARGET_OS}_${TARGET_ARCH}_${BUILD_TYPE}

if [ ${BUILD_TYPE} = 'clean' ]; then
	if [ -e "${OUT_PATH}" ]; then
		rm -rf ${OUT_PATH}
	fi

	if [ -e "${BIN_ROOT}" ]; then
		rm -rf ${BIN_ROOT}
	fi

	exit 0
fi

if [ ! -e "${OUT_PATH}" ]; then
	mkdir "${OUT_PATH}"
fi

OUT_PATH=${OUT_PATH}/${TARGET_OS}_${TARGET_ARCH}_${BUILD_TYPE}
if [ ! -e ${OUT_PATH} ]; then
	mkdir ${OUT_PATH}
fi

OUT_PATH=${OUT_PATH}/program
if [ ! -e ${OUT_PATH} ]; then
	mkdir ${OUT_PATH}
fi

cd ${OUT_PATH}
cmake -DBUILD_TYPE=${BUILD_TYPE} -DBUILD_OPTION="${BUILD_OPTION}" ${FIBJS_PATH} > CMake.log
if [ $? != 0 ]; then
	exit 1
fi

if [ ! "$BUILD_JOBS" = "" ]; then
	sh -c "${BUILD_VERBOSE} make -j${BUILD_JOBS}"
else
	sh -c "${BUILD_VERBOSE} make"
fi
if [ $? != 0 ]; then
	exit 1
fi

if [ "${BUILD_TYPE}" = "release" ]; then
	cd "${BIN_PATH}"
	cp "${FIBJS_PATH}/installer.txt" "installer.sh"
	tar -zcf fibjs.tar.gz fibjs
	echo '[100%] Built target fibjs.tar.gz'
	cat fibjs.tar.gz >> installer.sh
	chmod 777 installer.sh
	echo '[100%] Built target install.sh'

	if [ $TARGET_OS = "Linux" ]; then
		echo ''
		echo '==== GLIBC ===='
		${BUILD_PREFIX}objdump fibjs -p | grep GLIBC_[0-9.]* -o | sort | uniq
	fi

	if [ "${CI}" = "ci" ]; then
		xz -cz -T2 fibjs > fibjs.xz
		echo '[100%] Built target fibjs.xz'
	fi
fi

cd "${FIBJS_PATH}"
